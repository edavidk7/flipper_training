op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 3*c0, {c0: 16}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg0_1', 4*c0, {c0: 16}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf0.aliases = ['buf3']
    buf0.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cpu
op0.group.iteration = ((16,), ())
op0.sizes = ([16], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf0_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op0_loop_body:
    var_ranges = {z0: 16}
    index0 = 4*z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        cos = ops.cos(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, cos, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 3*c0, {c0: 16}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = []
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf1.aliases = ['buf3']
    buf1.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cpu
op1.group.iteration = ((16,), ())
op1.sizes = ([16], [])
buf1_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op1_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf1', get_index, constant, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', 3*c0, {c0: 16}, None)]
op2.unmet_dependencies = []
op2.met_dependencies = [MemoryDep('arg0_1', 4*c0, {c0: 16}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf2.aliases = ['buf3']
    buf2.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cpu
op2.group.iteration = ((16,), ())
op2.sizes = ([16], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf2_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op2_loop_body:
    var_ranges = {z0: 16}
    index0 = 4*z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        sin = ops.sin(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf2', get_index_1, sin, None)
        return store


op3: NopKernelSchedulerNode(ConcatKernel)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = 
    [   StarDep(name='buf0', mode=None),
        StarDep(name='buf1', mode=None),
        StarDep(name='buf2', mode=None)]
op3.met_dependencies = []
op3.outputs = [
    buf3: ConcatKernel
    buf3.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf3.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 3*c0, {c0: 16}, None)]
op4.unmet_dependencies = []
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf4.aliases = ['buf7']
    buf4.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cpu
op4.group.iteration = ((16,), ())
op4.sizes = ([16], [])
buf4_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op4_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf4', get_index, constant, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', 3*c0, {c0: 16}, None)]
op5.unmet_dependencies = []
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf5.aliases = ['buf7']
    buf5.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op5.group.device = cpu
op5.group.iteration = ((16,), ())
op5.sizes = ([16], [])
buf5_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op5_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf5', get_index, constant, None)
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', 3*c0, {c0: 16}, None)]
op6.unmet_dependencies = []
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf6.aliases = ['buf7']
    buf6.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cpu
op6.group.iteration = ((16,), ())
op6.sizes = ([16], [])
buf6_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op6_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf6', get_index, constant, None)
        return store


op7: NopKernelSchedulerNode(ConcatKernel)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = 
    [   StarDep(name='buf4', mode=None),
        StarDep(name='buf5', mode=None),
        StarDep(name='buf6', mode=None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ConcatKernel
    buf7.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf7.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', 3*c0, {c0: 16}, None)]
op8.unmet_dependencies = [MemoryDep('buf2', 3*c0, {c0: 16}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf8.aliases = ['buf11']
    buf8.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cpu
op8.group.iteration = ((16,), ())
op8.sizes = ([16], [])
buf2_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
buf8_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op8_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf8', get_index_1, neg, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 3*c0, {c0: 16}, None)]
op9.unmet_dependencies = []
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf9.aliases = ['buf11']
    buf9.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cpu
op9.group.iteration = ((16,), ())
op9.sizes = ([16], [])
buf9_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op9_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf9', get_index, constant, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', 3*c0, {c0: 16}, None)]
op10.unmet_dependencies = [MemoryDep('buf0', 3*c0, {c0: 16}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf10.aliases = ['buf11']
    buf10.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cpu
op10.group.iteration = ((16,), ())
op10.sizes = ([16], [])
buf0_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
buf10_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op10_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf10', get_index_1, load, None)
        return store


op11: NopKernelSchedulerNode(ConcatKernel)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = 
    [   StarDep(name='buf10', mode=None),
        StarDep(name='buf8', mode=None),
        StarDep(name='buf9', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ConcatKernel
    buf11.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf11.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op12.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 48}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf12.aliases = ['buf15']
    buf12.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cpu
op12.group.iteration = ((16, 3), ())
op12.sizes = ([16, 3], [])
buf3_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf12_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op12_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op13.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 48}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf13.aliases = ['buf15']
    buf13.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cpu
op13.group.iteration = ((16, 3), ())
op13.sizes = ([16, 3], [])
buf7_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf13_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op13_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf13', get_index_1, load, None)
        return store


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op14.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 48}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf14.aliases = ['buf15']
    buf14.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cpu
op14.group.iteration = ((16, 3), ())
op14.sizes = ([16, 3], [])
buf11_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf14_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op14_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, load, None)
        return store


op15: NopKernelSchedulerNode(ConcatKernel)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = 
    [   StarDep(name='buf12', mode=None),
        StarDep(name='buf13', mode=None),
        StarDep(name='buf14', mode=None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ConcatKernel
    buf15.layout = FixedLayout('cpu', torch.float32, size=[16, 9], stride=[9, 1])
    buf15.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 49104}, None)]
op16.unmet_dependencies = []
op16.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 49104}, None),
        MemoryDep('arg2_1', c1, {c0: 16368, c1: 3}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cpu
op16.group.iteration = ((16368, 3), ())
op16.sizes = ([16368, 3], [])
arg1_1_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg2_1_layout = FixedLayout('cpu', torch.float32, size=[4, 3], stride=[3, 1])
buf16_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op16_loop_body:
    var_ranges = {z0: 16368, z1: 3}
    index0 = 3*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf16', get_index_2, sub, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf15', mode=None), StarDep(name='buf16', mode=None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.bmm


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', 3*c0, {c0: 16}, None)]
op18.unmet_dependencies = []
op18.met_dependencies = [MemoryDep('arg0_1', 4*c0 + 1, {c0: 16}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf18.aliases = ['buf21']
    buf18.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cpu
op18.group.iteration = ((16,), ())
op18.sizes = ([16], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf18_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op18_loop_body:
    var_ranges = {z0: 16}
    index0 = 4*z0 + 1
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        cos = ops.cos(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf18', get_index_1, cos, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', 3*c0, {c0: 16}, None)]
op19.unmet_dependencies = []
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf19.aliases = ['buf21']
    buf19.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op19.group.device = cpu
op19.group.iteration = ((16,), ())
op19.sizes = ([16], [])
buf19_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op19_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf19', get_index, constant, None)
        return store


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', 3*c0, {c0: 16}, None)]
op20.unmet_dependencies = []
op20.met_dependencies = [MemoryDep('arg0_1', 4*c0 + 1, {c0: 16}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf20.aliases = ['buf21']
    buf20.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cpu
op20.group.iteration = ((16,), ())
op20.sizes = ([16], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf20_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op20_loop_body:
    var_ranges = {z0: 16}
    index0 = 4*z0 + 1
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        sin = ops.sin(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf20', get_index_1, sin, None)
        return store


op21: NopKernelSchedulerNode(ConcatKernel)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = 
    [   StarDep(name='buf18', mode=None),
        StarDep(name='buf19', mode=None),
        StarDep(name='buf20', mode=None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ConcatKernel
    buf21.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf21.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', 3*c0, {c0: 16}, None)]
op22.unmet_dependencies = []
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf22.aliases = ['buf25']
    buf22.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cpu
op22.group.iteration = ((16,), ())
op22.sizes = ([16], [])
buf22_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op22_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf22', get_index, constant, None)
        return store


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', 3*c0, {c0: 16}, None)]
op23.unmet_dependencies = []
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf23.aliases = ['buf25']
    buf23.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cpu
op23.group.iteration = ((16,), ())
op23.sizes = ([16], [])
buf23_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op23_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf23', get_index, constant, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', 3*c0, {c0: 16}, None)]
op24.unmet_dependencies = []
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf24.aliases = ['buf25']
    buf24.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cpu
op24.group.iteration = ((16,), ())
op24.sizes = ([16], [])
buf24_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op24_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf24', get_index, constant, None)
        return store


op25: NopKernelSchedulerNode(ConcatKernel)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = 
    [   StarDep(name='buf22', mode=None),
        StarDep(name='buf23', mode=None),
        StarDep(name='buf24', mode=None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ConcatKernel
    buf25.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf25.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', 3*c0, {c0: 16}, None)]
op26.unmet_dependencies = [MemoryDep('buf20', 3*c0, {c0: 16}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf26.aliases = ['buf29']
    buf26.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cpu
op26.group.iteration = ((16,), ())
op26.sizes = ([16], [])
buf20_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
buf26_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op26_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf26', get_index_1, neg, None)
        return store


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', 3*c0, {c0: 16}, None)]
op27.unmet_dependencies = []
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf27.aliases = ['buf29']
    buf27.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cpu
op27.group.iteration = ((16,), ())
op27.sizes = ([16], [])
buf27_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op27_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf27', get_index, constant, None)
        return store


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', 3*c0, {c0: 16}, None)]
op28.unmet_dependencies = [MemoryDep('buf18', 3*c0, {c0: 16}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf28.aliases = ['buf29']
    buf28.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cpu
op28.group.iteration = ((16,), ())
op28.sizes = ([16], [])
buf18_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
buf28_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op28_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf28', get_index_1, load, None)
        return store


op29: NopKernelSchedulerNode(ConcatKernel)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = 
    [   StarDep(name='buf26', mode=None),
        StarDep(name='buf27', mode=None),
        StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ConcatKernel
    buf29.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf29.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op30.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 48}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf30.aliases = ['buf33']
    buf30.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cpu
op30.group.iteration = ((16, 3), ())
op30.sizes = ([16, 3], [])
buf21_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf30_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op30_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf30', get_index_1, load, None)
        return store


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op31.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 48}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf31.aliases = ['buf33']
    buf31.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cpu
op31.group.iteration = ((16, 3), ())
op31.sizes = ([16, 3], [])
buf25_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf31_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op31_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf31', get_index_1, load, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op32.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 48}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf32.aliases = ['buf33']
    buf32.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cpu
op32.group.iteration = ((16, 3), ())
op32.sizes = ([16, 3], [])
buf29_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf32_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op32_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf32', get_index_1, load, None)
        return store


op33: NopKernelSchedulerNode(ConcatKernel)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = 
    [   StarDep(name='buf30', mode=None),
        StarDep(name='buf31', mode=None),
        StarDep(name='buf32', mode=None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ConcatKernel
    buf33.layout = FixedLayout('cpu', torch.float32, size=[16, 9], stride=[9, 1])
    buf33.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
]


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 49104}, None)]
op34.unmet_dependencies = []
op34.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 49104}, None),
        MemoryDep('arg2_1', c1 + 3, {c0: 16368, c1: 3}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cpu
op34.group.iteration = ((16368, 3), ())
op34.sizes = ([16368, 3], [])
arg1_1_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg2_1_layout = FixedLayout('cpu', torch.float32, size=[4, 3], stride=[3, 1])
buf34_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op34_loop_body:
    var_ranges = {z0: 16368, z1: 3}
    index0 = 3*z0 + z1
    index1 = z1 + 3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf34', get_index_2, sub, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf33', mode=None), StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.bmm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', 3*c0, {c0: 16}, None)]
op36.unmet_dependencies = []
op36.met_dependencies = [MemoryDep('arg0_1', 4*c0 + 2, {c0: 16}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf36.aliases = ['buf39']
    buf36.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cpu
op36.group.iteration = ((16,), ())
op36.sizes = ([16], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf36_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op36_loop_body:
    var_ranges = {z0: 16}
    index0 = 4*z0 + 2
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        cos = ops.cos(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf36', get_index_1, cos, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', 3*c0, {c0: 16}, None)]
op37.unmet_dependencies = []
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf37.aliases = ['buf39']
    buf37.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cpu
op37.group.iteration = ((16,), ())
op37.sizes = ([16], [])
buf37_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op37_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf37', get_index, constant, None)
        return store


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', 3*c0, {c0: 16}, None)]
op38.unmet_dependencies = []
op38.met_dependencies = [MemoryDep('arg0_1', 4*c0 + 2, {c0: 16}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf38.aliases = ['buf39']
    buf38.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op38.group.device = cpu
op38.group.iteration = ((16,), ())
op38.sizes = ([16], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf38_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op38_loop_body:
    var_ranges = {z0: 16}
    index0 = 4*z0 + 2
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        sin = ops.sin(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf38', get_index_1, sin, None)
        return store


op39: NopKernelSchedulerNode(ConcatKernel)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = 
    [   StarDep(name='buf36', mode=None),
        StarDep(name='buf37', mode=None),
        StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ConcatKernel
    buf39.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf39.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', 3*c0, {c0: 16}, None)]
op40.unmet_dependencies = []
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf40.aliases = ['buf43']
    buf40.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op40.group.device = cpu
op40.group.iteration = ((16,), ())
op40.sizes = ([16], [])
buf40_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op40_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf40', get_index, constant, None)
        return store


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', 3*c0, {c0: 16}, None)]
op41.unmet_dependencies = []
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf41.aliases = ['buf43']
    buf41.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cpu
op41.group.iteration = ((16,), ())
op41.sizes = ([16], [])
buf41_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op41_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf41', get_index, constant, None)
        return store


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', 3*c0, {c0: 16}, None)]
op42.unmet_dependencies = []
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf42.aliases = ['buf43']
    buf42.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op42.group.device = cpu
op42.group.iteration = ((16,), ())
op42.sizes = ([16], [])
buf42_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op42_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf42', get_index, constant, None)
        return store


op43: NopKernelSchedulerNode(ConcatKernel)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = 
    [   StarDep(name='buf40', mode=None),
        StarDep(name='buf41', mode=None),
        StarDep(name='buf42', mode=None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ConcatKernel
    buf43.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf43.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', 3*c0, {c0: 16}, None)]
op44.unmet_dependencies = [MemoryDep('buf38', 3*c0, {c0: 16}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf44.aliases = ['buf47']
    buf44.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cpu
op44.group.iteration = ((16,), ())
op44.sizes = ([16], [])
buf38_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
buf44_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op44_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf44', get_index_1, neg, None)
        return store


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', 3*c0, {c0: 16}, None)]
op45.unmet_dependencies = []
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf45.aliases = ['buf47']
    buf45.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op45.group.device = cpu
op45.group.iteration = ((16,), ())
op45.sizes = ([16], [])
buf45_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op45_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf45', get_index, constant, None)
        return store


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', 3*c0, {c0: 16}, None)]
op46.unmet_dependencies = [MemoryDep('buf36', 3*c0, {c0: 16}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf46.aliases = ['buf47']
    buf46.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op46.group.device = cpu
op46.group.iteration = ((16,), ())
op46.sizes = ([16], [])
buf36_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
buf46_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op46_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf46', get_index_1, load, None)
        return store


op47: NopKernelSchedulerNode(ConcatKernel)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = 
    [   StarDep(name='buf44', mode=None),
        StarDep(name='buf45', mode=None),
        StarDep(name='buf46', mode=None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ConcatKernel
    buf47.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf47.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op48.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 48}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf48.aliases = ['buf51']
    buf48.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cpu
op48.group.iteration = ((16, 3), ())
op48.sizes = ([16, 3], [])
buf39_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf48_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op48_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf48', get_index_1, load, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op49.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 48}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf49.aliases = ['buf51']
    buf49.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
    ]
]
op49.group.device = cpu
op49.group.iteration = ((16, 3), ())
op49.sizes = ([16, 3], [])
buf43_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf49_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op49_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf49', get_index_1, load, None)
        return store


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op50.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 48}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf50.aliases = ['buf51']
    buf50.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
    ]
]
op50.group.device = cpu
op50.group.iteration = ((16, 3), ())
op50.sizes = ([16, 3], [])
buf47_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf50_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op50_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf50', get_index_1, load, None)
        return store


op51: NopKernelSchedulerNode(ConcatKernel)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = 
    [   StarDep(name='buf48', mode=None),
        StarDep(name='buf49', mode=None),
        StarDep(name='buf50', mode=None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ConcatKernel
    buf51.layout = FixedLayout('cpu', torch.float32, size=[16, 9], stride=[9, 1])
    buf51.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
    ]
]


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 49104}, None)]
op52.unmet_dependencies = []
op52.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 49104}, None),
        MemoryDep('arg2_1', c1 + 6, {c0: 16368, c1: 3}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cpu
op52.group.iteration = ((16368, 3), ())
op52.sizes = ([16368, 3], [])
arg1_1_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg2_1_layout = FixedLayout('cpu', torch.float32, size=[4, 3], stride=[3, 1])
buf52_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op52_loop_body:
    var_ranges = {z0: 16368, z1: 3}
    index0 = 3*z0 + z1
    index1 = z1 + 6
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf52', get_index_2, sub, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None), StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.bmm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 49104}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 49104}, None),
        MemoryDep('buf35', c0, {c0: 49104}, None),
        MemoryDep('buf53', c0, {c0: 49104}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg2_1', c1 + 3, {c0: 16368, c1: 3}, None),
        MemoryDep('arg2_1', c1 + 6, {c0: 16368, c1: 3}, None),
        MemoryDep('arg2_1', c1, {c0: 16368, c1: 3}, None),
        MemoryDep('arg3_1', c1 + 1023, {c0: 16, c1: 1023}, None),
        MemoryDep('arg3_1', c1 + 2046, {c0: 16, c1: 1023}, None),
        MemoryDep('arg3_1', c1, {c0: 16, c1: 1023}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op54.group.device = cpu
op54.group.iteration = ((16, 1023, 3), ())
op54.sizes = ([16, 1023, 3], [])
arg3_1_layout = FixedLayout('cpu', torch.float32, size=[4, 1023], stride=[1023, 1])
buf17_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg2_1_layout = FixedLayout('cpu', torch.float32, size=[4, 3], stride=[3, 1])
arg3_1_layout = FixedLayout('cpu', torch.float32, size=[4, 1023], stride=[1023, 1])
buf35_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg2_1_layout = FixedLayout('cpu', torch.float32, size=[4, 3], stride=[3, 1])
arg3_1_layout = FixedLayout('cpu', torch.float32, size=[4, 1023], stride=[1023, 1])
buf53_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg2_1_layout = FixedLayout('cpu', torch.float32, size=[4, 3], stride=[3, 1])
buf54_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op54_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = z1
    index1 = 3069*z0 + 3*z1 + z2
    index2 = z2
    index3 = z1 + 1023
    index4 = z2 + 3
    index5 = z1 + 2046
    index6 = z2 + 6
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg3_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg2_1', get_index_2)
        add = ops.add(load_1, load_2)
        mul = ops.mul(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg3_1', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf35', get_index_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('arg2_1', get_index_5)
        add_1 = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add_1)
        add_2 = ops.add(mul, mul_1)
        get_index_6 = self.get_index('index5')
        load_6 = ops.load('arg3_1', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf53', get_index_7)
        get_index_8 = self.get_index('index6')
        load_8 = ops.load('arg2_1', get_index_8)
        add_3 = ops.add(load_7, load_8)
        mul_2 = ops.mul(load_6, add_3)
        add_4 = ops.add(add_2, mul_2)
        get_index_9 = self.get_index('index1')
        store = ops.store('buf54', get_index_9, add_4, None)
        return store


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', 3*c0, {c0: 16}, None)]
op55.unmet_dependencies = []
op55.met_dependencies = [MemoryDep('arg0_1', 4*c0 + 3, {c0: 16}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf55.aliases = ['buf58']
    buf55.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cpu
op55.group.iteration = ((16,), ())
op55.sizes = ([16], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf55_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op55_loop_body:
    var_ranges = {z0: 16}
    index0 = 4*z0 + 3
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        cos = ops.cos(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf55', get_index_1, cos, None)
        return store


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', 3*c0, {c0: 16}, None)]
op56.unmet_dependencies = []
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf56.aliases = ['buf58']
    buf56.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cpu
op56.group.iteration = ((16,), ())
op56.sizes = ([16], [])
buf56_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op56_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf56', get_index, constant, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', 3*c0, {c0: 16}, None)]
op57.unmet_dependencies = []
op57.met_dependencies = [MemoryDep('arg0_1', 4*c0 + 3, {c0: 16}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf57.aliases = ['buf58']
    buf57.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cpu
op57.group.iteration = ((16,), ())
op57.sizes = ([16], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf57_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op57_loop_body:
    var_ranges = {z0: 16}
    index0 = 4*z0 + 3
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        sin = ops.sin(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf57', get_index_1, sin, None)
        return store


op58: NopKernelSchedulerNode(ConcatKernel)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = 
    [   StarDep(name='buf55', mode=None),
        StarDep(name='buf56', mode=None),
        StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ConcatKernel
    buf58.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf58.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
    ]
]


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', 3*c0, {c0: 16}, None)]
op59.unmet_dependencies = []
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf59.aliases = ['buf62']
    buf59.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cpu
op59.group.iteration = ((16,), ())
op59.sizes = ([16], [])
buf59_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op59_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf59', get_index, constant, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', 3*c0, {c0: 16}, None)]
op60.unmet_dependencies = []
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf60.aliases = ['buf62']
    buf60.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op60.group.device = cpu
op60.group.iteration = ((16,), ())
op60.sizes = ([16], [])
buf60_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op60_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf60', get_index, constant, None)
        return store


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', 3*c0, {c0: 16}, None)]
op61.unmet_dependencies = []
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf61.aliases = ['buf62']
    buf61.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op61.group.device = cpu
op61.group.iteration = ((16,), ())
op61.sizes = ([16], [])
buf61_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op61_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf61', get_index, constant, None)
        return store


op62: NopKernelSchedulerNode(ConcatKernel)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = 
    [   StarDep(name='buf59', mode=None),
        StarDep(name='buf60', mode=None),
        StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ConcatKernel
    buf62.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf62.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', 3*c0, {c0: 16}, None)]
op63.unmet_dependencies = [MemoryDep('buf57', 3*c0, {c0: 16}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf63.aliases = ['buf66']
    buf63.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cpu
op63.group.iteration = ((16,), ())
op63.sizes = ([16], [])
buf57_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
buf63_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op63_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf63', get_index_1, neg, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 3*c0, {c0: 16}, None)]
op64.unmet_dependencies = []
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf64.aliases = ['buf66']
    buf64.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op64.group.device = cpu
op64.group.iteration = ((16,), ())
op64.sizes = ([16], [])
buf64_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op64_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf64', get_index, constant, None)
        return store


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', 3*c0, {c0: 16}, None)]
op65.unmet_dependencies = [MemoryDep('buf55', 3*c0, {c0: 16}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf65.aliases = ['buf66']
    buf65.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op65.group.device = cpu
op65.group.iteration = ((16,), ())
op65.sizes = ([16], [])
buf55_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
buf65_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op65_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf65', get_index_1, load, None)
        return store


op66: NopKernelSchedulerNode(ConcatKernel)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = 
    [   StarDep(name='buf63', mode=None),
        StarDep(name='buf64', mode=None),
        StarDep(name='buf65', mode=None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ConcatKernel
    buf66.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf66.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op67.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 48}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf67.aliases = ['buf70']
    buf67.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]
op67.group.device = cpu
op67.group.iteration = ((16, 3), ())
op67.sizes = ([16, 3], [])
buf58_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf67_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op67_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf67', get_index_1, load, None)
        return store


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op68.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 48}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf68.aliases = ['buf70']
    buf68.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]
op68.group.device = cpu
op68.group.iteration = ((16, 3), ())
op68.sizes = ([16, 3], [])
buf62_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf68_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op68_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf68', get_index_1, load, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op69.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 48}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf69.aliases = ['buf70']
    buf69.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cpu
op69.group.iteration = ((16, 3), ())
op69.sizes = ([16, 3], [])
buf66_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf69_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op69_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf69', get_index_1, load, None)
        return store


op70: NopKernelSchedulerNode(ConcatKernel)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = 
    [   StarDep(name='buf67', mode=None),
        StarDep(name='buf68', mode=None),
        StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ConcatKernel
    buf70.layout = FixedLayout('cpu', torch.float32, size=[16, 9], stride=[9, 1])
    buf70.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 49104}, None)]
op71.unmet_dependencies = []
op71.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 49104}, None),
        MemoryDep('arg2_1', c1 + 9, {c0: 16368, c1: 3}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cpu
op71.group.iteration = ((16368, 3), ())
op71.sizes = ([16368, 3], [])
arg1_1_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg2_1_layout = FixedLayout('cpu', torch.float32, size=[4, 3], stride=[3, 1])
buf71_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op71_loop_body:
    var_ranges = {z0: 16368, z1: 3}
    index0 = 3*z0 + z1
    index1 = z1 + 9
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf71', get_index_2, sub, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf70', mode=None), StarDep(name='buf71', mode=None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.bmm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 49104}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 49104}, None),
        MemoryDep('buf72', c0, {c0: 49104}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 49104}, None),
        MemoryDep('arg2_1', c1 + 9, {c0: 16368, c1: 3}, None),
        MemoryDep('arg3_1', c1 + 3069, {c0: 16, c1: 1023}, None),
        MemoryDep('arg4_1', c1, {c0: 16, c1: 1023}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf73.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cpu
op73.group.iteration = ((16, 1023, 3), ())
op73.sizes = ([16, 1023, 3], [])
buf54_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg3_1_layout = FixedLayout('cpu', torch.float32, size=[4, 1023], stride=[1023, 1])
buf72_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg2_1_layout = FixedLayout('cpu', torch.float32, size=[4, 3], stride=[3, 1])
arg4_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
arg1_1_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf73_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op73_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = 3069*z0 + 3*z1 + z2
    index1 = z1 + 3069
    index2 = z2 + 9
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg3_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg2_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg4_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg1_1', get_index_5)
        mul_1 = ops.mul(load_4, load_5)
        add_2 = ops.add(add_1, mul_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf73', get_index_6, add_2, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.bmm


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 49104}, None)]
op75.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 49104}, None)]
op75.met_dependencies = [MemoryDep('arg5_1', 3*c0 + c2, {c0: 16, c1: 1023, c2: 3}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op75.group.device = cpu
op75.group.iteration = ((16, 1023, 3), ())
op75.sizes = ([16, 1023, 3], [])
buf74_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg5_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op75_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = 3069*z0 + 3*z1 + z2
    index1 = 3*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg5_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf75', get_index_2, add, None)
        return store


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 48}, None)]
op76.unmet_dependencies = [MemoryDep('buf75', 3069*c0 + c1 + 3*c2, {c0: 16, c1: 3, c2: 1023}, None)]
op76.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 48, c1: 1023}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op76.group.device = cpu
op76.group.iteration = ((16, 3), (1023,))
op76.sizes = ([16, 3], [1023])
arg7_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf76_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op76_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 1023}
    index0 = z2
    index1 = 3069*z0 + z1 + 3*z2
    index2 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf75', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_2, reduction)
        return store_reduction


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', 0, {}, None)]
op77.unmet_dependencies = []
op77.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 1023}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cpu', torch.float32, size=[], stride=[])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cpu
op77.group.iteration = ((), (1023,))
op77.sizes = ([], [1023])
arg7_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
buf77_layout = FixedLayout('cpu', torch.float32, size=[], stride=[])
class op77_loop_body:
    var_ranges = {z0: 1023}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_1, reduction)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 48}, None)]
op78.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 48}, None), MemoryDep('buf77', 0, {}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cpu
op78.group.iteration = ((48,), ())
op78.sizes = ([48], [])
buf76_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf77_layout = FixedLayout('cpu', torch.float32, size=[], stride=[])
buf78_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op78_loop_body:
    var_ranges = {z0: 48}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf77', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf78', get_index_2, truediv, None)
        return store


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 49104}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 49104}, None),
        MemoryDep('buf78', 3*c0 + c2, {c0: 16, c1: 1023, c2: 3}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op79.group.device = cpu
op79.group.iteration = ((16, 1023, 3), ())
op79.sizes = ([16, 1023, 3], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf78_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op79_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = 3069*z0 + 3*z1 + z2
    index1 = 3*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf78', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf79', get_index_2, sub, None)
        return store


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 16}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf79', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf79', 3*c0 + 2, {c0: 16368}, None)]
op80.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 16, c1: 1023}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.group.device = cpu
op80.group.iteration = ((16,), (1023,))
op80.sizes = ([16], [1023])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg7_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf80_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
class op80_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 3069*z0 + 3*z1 + 1
    index1 = z1
    index2 = 3069*z0 + 3*z1 + 2
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg7_1', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf79', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf79', get_index_4)
        mul_2 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg7_1', get_index_5)
        mul_3 = ops.mul(mul_2, load_5)
        add = ops.add(mul_1, mul_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_6 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf80', get_index_6, reduction)
        return store_reduction


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 16}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf79', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf79', 3*c0, {c0: 16368}, None)]
op81.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 16, c1: 1023}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cpu
op81.group.iteration = ((16,), (1023,))
op81.sizes = ([16], [1023])
arg7_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf81_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
class op81_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = z1
    index1 = 3069*z0 + 3*z1
    index2 = 3069*z0 + 3*z1 + 1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf79', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf81', get_index_3, reduction)
        return store_reduction


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 16}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf79', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf79', 3*c0, {c0: 16368}, None)]
op82.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 16, c1: 1023}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cpu
op82.group.iteration = ((16,), (1023,))
op82.sizes = ([16], [1023])
arg7_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf82_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
class op82_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = z1
    index1 = 3069*z0 + 3*z1
    index2 = 3069*z0 + 3*z1 + 2
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf79', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf82', get_index_3, reduction)
        return store_reduction


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', 3*c0, {c0: 16}, None)]
op83.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 16}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf83.aliases = ['buf86']
    buf83.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cpu
op83.group.iteration = ((16,), ())
op83.sizes = ([16], [])
buf80_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf83_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op83_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf83', get_index_1, load, None)
        return store


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', 3*c0, {c0: 16}, None)]
op84.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 16}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf84.aliases = ['buf86']
    buf84.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cpu
op84.group.iteration = ((16,), ())
op84.sizes = ([16], [])
buf81_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf84_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op84_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf84', get_index_1, neg, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', 3*c0, {c0: 16}, None)]
op85.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 16}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf85.aliases = ['buf86']
    buf85.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cpu
op85.group.iteration = ((16,), ())
op85.sizes = ([16], [])
buf82_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf85_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op85_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf85', get_index_1, neg, None)
        return store


op86: NopKernelSchedulerNode(ConcatKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = 
    [   StarDep(name='buf83', mode=None),
        StarDep(name='buf84', mode=None),
        StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ConcatKernel
    buf86.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf86.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 16}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf79', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf79', 3*c0, {c0: 16368}, None)]
op87.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 16, c1: 1023}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op87.group.device = cpu
op87.group.iteration = ((16,), (1023,))
op87.sizes = ([16], [1023])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg7_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf87_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
class op87_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 3069*z0 + 3*z1
    index1 = z1
    index2 = 3069*z0 + 3*z1 + 2
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg7_1', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf79', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf79', get_index_4)
        mul_2 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg7_1', get_index_5)
        mul_3 = ops.mul(mul_2, load_5)
        add = ops.add(mul_1, mul_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_6 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf87', get_index_6, reduction)
        return store_reduction


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 16}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf79', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf79', 3*c0 + 2, {c0: 16368}, None)]
op88.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 16, c1: 1023}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
    ]
]
op88.group.device = cpu
op88.group.iteration = ((16,), (1023,))
op88.sizes = ([16], [1023])
arg7_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf88_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
class op88_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = z1
    index1 = 3069*z0 + 3*z1 + 1
    index2 = 3069*z0 + 3*z1 + 2
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf79', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf88', get_index_3, reduction)
        return store_reduction


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', 3*c0, {c0: 16}, None)]
op89.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 16}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf89.aliases = ['buf92']
    buf89.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op89.group.device = cpu
op89.group.iteration = ((16,), ())
op89.sizes = ([16], [])
buf81_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf89_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op89_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf89', get_index_1, neg, None)
        return store


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', 3*c0, {c0: 16}, None)]
op90.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 16}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf90.aliases = ['buf92']
    buf90.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cpu
op90.group.iteration = ((16,), ())
op90.sizes = ([16], [])
buf87_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf90_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op90_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', 3*c0, {c0: 16}, None)]
op91.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 16}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf91.aliases = ['buf92']
    buf91.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op91.group.device = cpu
op91.group.iteration = ((16,), ())
op91.sizes = ([16], [])
buf88_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf91_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op91_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf91', get_index_1, neg, None)
        return store


op92: NopKernelSchedulerNode(ConcatKernel)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = 
    [   StarDep(name='buf89', mode=None),
        StarDep(name='buf90', mode=None),
        StarDep(name='buf91', mode=None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ConcatKernel
    buf92.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf92.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 16}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf79', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf79', 3*c0, {c0: 16368}, None)]
op93.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 16, c1: 1023}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cpu
op93.group.iteration = ((16,), (1023,))
op93.sizes = ([16], [1023])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg7_1_layout = FixedLayout('cpu', torch.float32, size=[1023], stride=[1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf93_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
class op93_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 3069*z0 + 3*z1
    index1 = z1
    index2 = 3069*z0 + 3*z1 + 1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg7_1', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf79', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf79', get_index_4)
        mul_2 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg7_1', get_index_5)
        mul_3 = ops.mul(mul_2, load_5)
        add = ops.add(mul_1, mul_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_6 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf93', get_index_6, reduction)
        return store_reduction


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', 3*c0, {c0: 16}, None)]
op94.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 16}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf94.aliases = ['buf97']
    buf94.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cpu
op94.group.iteration = ((16,), ())
op94.sizes = ([16], [])
buf82_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf94_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op94_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf94', get_index_1, neg, None)
        return store


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', 3*c0, {c0: 16}, None)]
op95.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 16}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf95.aliases = ['buf97']
    buf95.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cpu
op95.group.iteration = ((16,), ())
op95.sizes = ([16], [])
buf88_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf95_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op95_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf95', get_index_1, neg, None)
        return store


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', 3*c0, {c0: 16}, None)]
op96.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 16}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
    buf96.aliases = ['buf97']
    buf96.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cpu
op96.group.iteration = ((16,), ())
op96.sizes = ([16], [])
buf93_layout = FixedLayout('cpu', torch.float32, size=[16], stride=[1])
buf96_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1], stride=[3, 1])
class op96_loop_body:
    var_ranges = {z0: 16}
    index0 = z0
    index1 = 3*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf96', get_index_1, load, None)
        return store


op97: NopKernelSchedulerNode(ConcatKernel)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = 
    [   StarDep(name='buf94', mode=None),
        StarDep(name='buf95', mode=None),
        StarDep(name='buf96', mode=None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ConcatKernel
    buf97.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf97.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op98.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 48}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf98.aliases = ['buf101']
    buf98.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cpu
op98.group.iteration = ((16, 3), ())
op98.sizes = ([16, 3], [])
buf86_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf98_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op98_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf98', get_index_1, load, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op99.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 48}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf99.aliases = ['buf101']
    buf99.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cpu
op99.group.iteration = ((16, 3), ())
op99.sizes = ([16, 3], [])
buf92_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf99_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op99_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf99', get_index_1, load, None)
        return store


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', 9*c0 + c1, {c0: 16, c1: 3}, None)]
op100.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 48}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
    buf100.aliases = ['buf101']
    buf100.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cpu
op100.group.iteration = ((16, 3), ())
op100.sizes = ([16, 3], [])
buf97_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf100_layout = NonOwningLayout('cpu', torch.float32, size=[16, 3], stride=[9, 1])
class op100_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 3*z0 + z1
    index1 = 9*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf100', get_index_1, load, None)
        return store


op101: NopKernelSchedulerNode(ConcatKernel)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = 
    [   StarDep(name='buf100', mode=None),
        StarDep(name='buf98', mode=None),
        StarDep(name='buf99', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ConcatKernel
    buf101.layout = FixedLayout('cpu', torch.float32, size=[16, 9], stride=[9, 1])
    buf101.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 16368}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op102.met_dependencies = [MemoryDep('arg8_1', 65536*c0 + 256*tmp0 + tmp1, {c0: 16}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1023, 1], stride=[1023, 16368, 1, 16368])
    buf102.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op102.group.device = cpu
op102.group.iteration = ((16, 1023), ())
op102.sizes = ([16, 1023], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg8_1_layout = FixedLayout('cpu', torch.float32, size=[16, 256, 256], stride=[65536, 256, 1])
buf102_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1023, 1], stride=[1023, 16368, 1, 16368])
class op102_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = z0
    index1 = 16
    index2 = 0
    index3 = 1
    index4 = 3069*z0 + 3*z1
    index5 = 3069*z0 + 3*z1 + 1
    index6 = 256*indirect0 + indirect1 + 65536*z0
    index7 = 1023*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf75', get_index_4)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf75', get_index_5)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('buf75', get_index_6)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_17)
        get_index_7 = self.get_index('index5')
        load_3 = ops.load('buf75', get_index_7)
        constant_18 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_18)
        constant_19 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_20)
        constant_21 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        add_3 = ops.add(mul_7, constant_22)
        floor_3 = ops.floor(add_3)
        constant_23 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_23)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_8 = self.get_index('index5')
        load_4 = ops.load('buf75', get_index_8)
        constant_24 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_24)
        constant_25 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_25)
        constant_26 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_26)
        constant_27 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_27)
        constant_28 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_9, constant_28)
        floor_4 = ops.floor(add_4)
        to_dtype = ops.to_dtype(floor_4, torch.int64, src_dtype = torch.float32)
        constant_29 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_29)
        set_indirect0 = self.set_indirect0(where)
        get_index_9 = self.get_index('index4')
        load_5 = ops.load('buf75', get_index_9)
        constant_30 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_30)
        constant_31 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_31)
        constant_32 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_32)
        constant_33 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_33)
        constant_34 = ops.constant(127.5, torch.float32)
        add_5 = ops.add(mul_11, constant_34)
        floor_5 = ops.floor(add_5)
        constant_35 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(floor_5, constant_35)
        get_index_10 = self.get_index('index4')
        load_6 = ops.load('buf75', get_index_10)
        constant_36 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_36)
        constant_37 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_37)
        constant_38 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_38)
        constant_39 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_39)
        constant_40 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_13, constant_40)
        floor_6 = ops.floor(add_6)
        constant_41 = ops.constant(256.0, torch.float32)
        lt_2 = ops.lt(floor_6, constant_41)
        get_index_11 = self.get_index('index5')
        load_7 = ops.load('buf75', get_index_11)
        constant_42 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_42)
        constant_43 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_43)
        constant_44 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_44)
        constant_45 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_45)
        constant_46 = ops.constant(127.5, torch.float32)
        add_7 = ops.add(mul_15, constant_46)
        floor_7 = ops.floor(add_7)
        constant_47 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(floor_7, constant_47)
        get_index_12 = self.get_index('index5')
        load_8 = ops.load('buf75', get_index_12)
        constant_48 = ops.constant(0.15625, torch.float32)
        mul_16 = ops.mul(load_8, constant_48)
        constant_49 = ops.constant(-1.0, torch.float32)
        maximum_8 = ops.maximum(mul_16, constant_49)
        constant_50 = ops.constant(1.0, torch.float32)
        minimum_8 = ops.minimum(maximum_8, constant_50)
        constant_51 = ops.constant(127.5, torch.float32)
        mul_17 = ops.mul(minimum_8, constant_51)
        constant_52 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_17, constant_52)
        floor_8 = ops.floor(add_8)
        constant_53 = ops.constant(256.0, torch.float32)
        lt_3 = ops.lt(floor_8, constant_53)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_13 = self.get_index('index4')
        load_9 = ops.load('buf75', get_index_13)
        constant_54 = ops.constant(0.15625, torch.float32)
        mul_18 = ops.mul(load_9, constant_54)
        constant_55 = ops.constant(-1.0, torch.float32)
        maximum_9 = ops.maximum(mul_18, constant_55)
        constant_56 = ops.constant(1.0, torch.float32)
        minimum_9 = ops.minimum(maximum_9, constant_56)
        constant_57 = ops.constant(127.5, torch.float32)
        mul_19 = ops.mul(minimum_9, constant_57)
        constant_58 = ops.constant(127.5, torch.float32)
        add_9 = ops.add(mul_19, constant_58)
        floor_9 = ops.floor(add_9)
        to_dtype_1 = ops.to_dtype(floor_9, torch.int64, src_dtype = torch.float32)
        constant_59 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_59)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_14 = self.get_index('index6')
        load_10 = ops.load('arg8_1', get_index_14)
        get_index_15 = self.get_index('index7')
        store = ops.store('buf102', get_index_15, load_10, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 16368}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op103.group.device = cpu
op103.group.iteration = ((16368,), ())
op103.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf103_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op103_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_17)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_18 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_18)
        constant_19 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_20)
        constant_21 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        add_3 = ops.add(mul_7, constant_22)
        floor_3 = ops.floor(add_3)
        constant_23 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_23)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_24 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_24)
        constant_25 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_25)
        constant_26 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_26)
        constant_27 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_27)
        constant_28 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_9, constant_28)
        floor_4 = ops.floor(add_4)
        constant_29 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_4, constant_29)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        constant_30 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_30)
        constant_31 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_31)
        constant_32 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_32)
        constant_33 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_33)
        constant_34 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_11, constant_34)
        sub = ops.sub(add_5, add_6)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf75', get_index_6)
        constant_35 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_35)
        constant_36 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_36)
        constant_37 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_37)
        constant_38 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_38)
        constant_39 = ops.constant(127.5, torch.float32)
        add_7 = ops.add(mul_13, constant_39)
        floor_5 = ops.floor(add_7)
        constant_40 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(floor_5, constant_40)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf75', get_index_7)
        constant_41 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_41)
        constant_42 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_42)
        constant_43 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_43)
        constant_44 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_44)
        constant_45 = ops.constant(127.5, torch.float32)
        add_9 = ops.add(mul_15, constant_45)
        sub_1 = ops.sub(add_8, add_9)
        mul_16 = ops.mul(sub, sub_1)
        constant_46 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_16, constant_46)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf103', get_index_8, where, None)
        return store


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 16368}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op104.group.device = cpu
op104.group.iteration = ((16368,), ())
op104.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf104_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op104_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_19)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_20 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_20)
        constant_21 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_21)
        constant_22 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        add_5 = ops.add(mul_7, constant_24)
        floor_3 = ops.floor(add_5)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        to_dtype = ops.to_dtype(floor_4, torch.int64, src_dtype = torch.float32)
        constant_31 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_31)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf104', get_index_5, where, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 16368}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op105.group.device = cpu
op105.group.iteration = ((16368,), ())
op105.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf105_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op105_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_19)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_20 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_20)
        constant_21 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_21)
        constant_22 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        add_5 = ops.add(mul_7, constant_24)
        floor_3 = ops.floor(add_5)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        constant_31 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_31)
        to_dtype = ops.to_dtype(add_7, torch.int64, src_dtype = torch.float32)
        constant_32 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_32)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf105', get_index_5, where, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 16368}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op106.group.device = cpu
op106.group.iteration = ((16368,), ())
op106.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf106_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op106_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_19)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_20 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_20)
        constant_21 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_21)
        constant_22 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        add_5 = ops.add(mul_7, constant_24)
        floor_3 = ops.floor(add_5)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        constant_31 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_31)
        constant_32 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_32)
        constant_33 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_33)
        constant_34 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_34)
        constant_35 = ops.constant(127.5, torch.float32)
        add_7 = ops.add(mul_11, constant_35)
        floor_4 = ops.floor(add_7)
        sub = ops.sub(add_6, floor_4)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf75', get_index_6)
        constant_36 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_36)
        constant_37 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_37)
        constant_38 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_38)
        constant_39 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_39)
        constant_40 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_13, constant_40)
        floor_5 = ops.floor(add_8)
        constant_41 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_5, constant_41)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf75', get_index_7)
        constant_42 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_42)
        constant_43 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_43)
        constant_44 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_44)
        constant_45 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_45)
        constant_46 = ops.constant(127.5, torch.float32)
        add_10 = ops.add(mul_15, constant_46)
        sub_1 = ops.sub(add_9, add_10)
        mul_16 = ops.mul(sub, sub_1)
        constant_47 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_16, constant_47)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf106', get_index_8, where, None)
        return store


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 16368}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op107.group.device = cpu
op107.group.iteration = ((16368,), ())
op107.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf107_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op107_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_18)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_19 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_19)
        constant_20 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_20)
        constant_21 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_7, constant_23)
        floor_3 = ops.floor(add_4)
        constant_24 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_24)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        constant_31 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_31)
        to_dtype = ops.to_dtype(add_7, torch.int64, src_dtype = torch.float32)
        constant_32 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_32)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf107', get_index_5, where, None)
        return store


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 16368}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op108.group.device = cpu
op108.group.iteration = ((16368,), ())
op108.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf108_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op108_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_18)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_19 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_19)
        constant_20 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_20)
        constant_21 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_7, constant_23)
        floor_3 = ops.floor(add_4)
        constant_24 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_24)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        to_dtype = ops.to_dtype(floor_4, torch.int64, src_dtype = torch.float32)
        constant_31 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_31)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf108', get_index_5, where, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 16368}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.group.device = cpu
op109.group.iteration = ((16368,), ())
op109.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf109_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op109_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_18)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_19 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_19)
        constant_20 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_20)
        constant_21 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_7, constant_23)
        floor_3 = ops.floor(add_4)
        constant_24 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_24)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        constant_31 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_31)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        constant_32 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_32)
        constant_33 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_33)
        constant_34 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_34)
        constant_35 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_35)
        constant_36 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_11, constant_36)
        sub = ops.sub(add_7, add_8)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf75', get_index_6)
        constant_37 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_37)
        constant_38 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_38)
        constant_39 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_39)
        constant_40 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_40)
        constant_41 = ops.constant(127.5, torch.float32)
        add_9 = ops.add(mul_13, constant_41)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf75', get_index_7)
        constant_42 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_42)
        constant_43 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_43)
        constant_44 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_44)
        constant_45 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_45)
        constant_46 = ops.constant(127.5, torch.float32)
        add_10 = ops.add(mul_15, constant_46)
        floor_5 = ops.floor(add_10)
        sub_1 = ops.sub(add_9, floor_5)
        mul_16 = ops.mul(sub, sub_1)
        constant_47 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_16, constant_47)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf109', get_index_8, where, None)
        return store


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 16368}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 16368}, None),
        MemoryDep('buf103', c0, {c0: 16368}, None),
        MemoryDep('buf104', c0, {c0: 16368}, None),
        MemoryDep('buf105', c0, {c0: 16368}, None),
        MemoryDep('buf106', c0, {c0: 16368}, None),
        MemoryDep('buf107', c0, {c0: 16368}, None),
        MemoryDep('buf108', c0, {c0: 16368}, None),
        MemoryDep('buf109', c0, {c0: 16368}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg8_1', 65536*c0 + 256*tmp0 + tmp1, {c0: 16}, None),
        MemoryDep('arg8_1', 65536*c0 + 256*tmp2 + tmp3, {c0: 16}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1023, 1], stride=[1023, 16368, 1, 16368])
    buf110.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op110.group.device = cpu
op110.group.iteration = ((16, 1023), ())
op110.sizes = ([16, 1023], [])
buf102_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1023, 1], stride=[1023, 16368, 1, 16368])
buf103_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf104_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
buf105_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
arg8_1_layout = FixedLayout('cpu', torch.float32, size=[16, 256, 256], stride=[65536, 256, 1])
buf106_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf107_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
buf108_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
arg8_1_layout = FixedLayout('cpu', torch.float32, size=[16, 256, 256], stride=[65536, 256, 1])
buf109_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf110_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1023, 1], stride=[1023, 16368, 1, 16368])
class op110_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 1023*z0 + z1
    index1 = z0
    index2 = 16
    index3 = 0
    index4 = 1
    index5 = 256*indirect0 + indirect1 + 65536*z0
    index6 = 256*indirect2 + indirect3 + 65536*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        get_index_3 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        get_index_5 = self.get_index('index4')
        check_bounds_1 = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('buf104', get_index_6)
        set_indirect0 = self.set_indirect0(load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('buf105', get_index_7)
        set_indirect1 = self.set_indirect1(load_3)
        get_index_8 = self.get_index('index5')
        load_4 = ops.load('arg8_1', get_index_8)
        get_index_9 = self.get_index('index0')
        load_5 = ops.load('buf106', get_index_9)
        mul_1 = ops.mul(load_4, load_5)
        add = ops.add(mul, mul_1)
        get_index_10 = self.get_index('index1')
        get_index_11 = self.get_index('index2')
        check_bounds_2 = ops.check_bounds(get_index_10, get_index_11, False, False)
        get_index_12 = self.get_index('index3')
        get_index_13 = self.get_index('index4')
        check_bounds_3 = ops.check_bounds(get_index_12, get_index_13, False, False)
        get_index_14 = self.get_index('index0')
        load_6 = ops.load('buf107', get_index_14)
        set_indirect2 = self.set_indirect2(load_6)
        get_index_15 = self.get_index('index0')
        load_7 = ops.load('buf108', get_index_15)
        set_indirect3 = self.set_indirect3(load_7)
        get_index_16 = self.get_index('index6')
        load_8 = ops.load('arg8_1', get_index_16)
        get_index_17 = self.get_index('index0')
        load_9 = ops.load('buf109', get_index_17)
        mul_2 = ops.mul(load_8, load_9)
        add_1 = ops.add(add, mul_2)
        get_index_18 = self.get_index('index0')
        store = ops.store('buf110', get_index_18, add_1, None)
        return store


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 16368}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op111.group.device = cpu
op111.group.iteration = ((16368,), ())
op111.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf111_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op111_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_19)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_20)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_21 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_21)
        constant_22 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_22)
        constant_23 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_24)
        constant_25 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_7, constant_25)
        floor_3 = ops.floor(add_6)
        constant_26 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_26)
        constant_27 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_27)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf75', get_index_4)
        constant_28 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_28)
        constant_29 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_30)
        constant_31 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_31)
        constant_32 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_9, constant_32)
        floor_4 = ops.floor(add_8)
        constant_33 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_33)
        to_dtype = ops.to_dtype(add_9, torch.int64, src_dtype = torch.float32)
        constant_34 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_34)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf111', get_index_5, where, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 16368}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op112.group.device = cpu
op112.group.iteration = ((16368,), ())
op112.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf112_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op112_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_19)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_20)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_21 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_21)
        constant_22 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_22)
        constant_23 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_24)
        constant_25 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_7, constant_25)
        floor_3 = ops.floor(add_6)
        constant_26 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_26)
        constant_27 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_27)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_28 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_28)
        constant_29 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_30)
        constant_31 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_31)
        constant_32 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_9, constant_32)
        floor_4 = ops.floor(add_8)
        constant_33 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_33)
        to_dtype = ops.to_dtype(add_9, torch.int64, src_dtype = torch.float32)
        constant_34 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_34)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf112', get_index_5, where, None)
        return store


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 16368}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.group.device = cpu
op113.group.iteration = ((16368,), ())
op113.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf113_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op113_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_19)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_20)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_21 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_21)
        constant_22 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_22)
        constant_23 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_24)
        constant_25 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_7, constant_25)
        floor_3 = ops.floor(add_6)
        constant_26 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_26)
        constant_27 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_27)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_28 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_28)
        constant_29 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_30)
        constant_31 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_31)
        constant_32 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_9, constant_32)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        constant_33 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_33)
        constant_34 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_34)
        constant_35 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_35)
        constant_36 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_36)
        constant_37 = ops.constant(127.5, torch.float32)
        add_9 = ops.add(mul_11, constant_37)
        floor_4 = ops.floor(add_9)
        sub = ops.sub(add_8, floor_4)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf75', get_index_6)
        constant_38 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_38)
        constant_39 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_40)
        constant_41 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_41)
        constant_42 = ops.constant(127.5, torch.float32)
        add_10 = ops.add(mul_13, constant_42)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf75', get_index_7)
        constant_43 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_43)
        constant_44 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_44)
        constant_45 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_45)
        constant_46 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_46)
        constant_47 = ops.constant(127.5, torch.float32)
        add_11 = ops.add(mul_15, constant_47)
        floor_5 = ops.floor(add_11)
        sub_1 = ops.sub(add_10, floor_5)
        mul_16 = ops.mul(sub, sub_1)
        constant_48 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_16, constant_48)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf113', get_index_8, where, None)
        return store


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 16368}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 16368}, None),
        MemoryDep('buf111', c0, {c0: 16368}, None),
        MemoryDep('buf112', c0, {c0: 16368}, None),
        MemoryDep('buf113', c0, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0 + 2, {c0: 16368}, None)]
op114.met_dependencies = [MemoryDep('arg8_1', 65536*c0 + 256*tmp0 + tmp1, {c0: 16}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
    ]
]
op114.group.device = cpu
op114.group.iteration = ((16, 1023), ())
op114.sizes = ([16, 1023], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf110_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1023, 1], stride=[1023, 16368, 1, 16368])
buf111_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
buf112_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
arg8_1_layout = FixedLayout('cpu', torch.float32, size=[16, 256, 256], stride=[65536, 256, 1])
buf113_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
class op114_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 3069*z0 + 3*z1 + 2
    index1 = 1023*z0 + z1
    index2 = z0
    index3 = 16
    index4 = 0
    index5 = 1
    index6 = 256*indirect0 + indirect1 + 65536*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        get_index_5 = self.get_index('index5')
        check_bounds_1 = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('buf111', get_index_6)
        set_indirect0 = self.set_indirect0(load_2)
        get_index_7 = self.get_index('index1')
        load_3 = ops.load('buf112', get_index_7)
        set_indirect1 = self.set_indirect1(load_3)
        get_index_8 = self.get_index('index6')
        load_4 = ops.load('arg8_1', get_index_8)
        get_index_9 = self.get_index('index1')
        load_5 = ops.load('buf113', get_index_9)
        mul = ops.mul(load_4, load_5)
        add = ops.add(load_1, mul)
        sub = ops.sub(load, add)
        get_index_10 = self.get_index('index1')
        store = ops.store('buf114', get_index_10, sub, None)
        return store


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 16368}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op115.group.device = cpu
op115.group.iteration = ((16368,), ())
op115.sizes = ([16368], [])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf115_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op115_loop_body:
    var_ranges = {z0: 16368}
    index0 = z0
    index1 = 3*z0
    index2 = 3*z0 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        constant = ops.constant(0.0, torch.float32)
        le = ops.le(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf75', get_index_1)
        constant_1 = ops.constant(-6.4, torch.float32)
        maximum = ops.maximum(load_1, constant_1)
        constant_2 = ops.constant(6.4, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        eq = ops.eq(minimum, load_2)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf75', get_index_3)
        constant_3 = ops.constant(-6.4, torch.float32)
        maximum_1 = ops.maximum(load_3, constant_3)
        constant_4 = ops.constant(6.4, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_4)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf75', get_index_4)
        eq_1 = ops.eq(minimum_1, load_4)
        logical_not_1 = ops.logical_not(eq_1)
        to_dtype_2 = ops.to_dtype(logical_not_1, torch.int64, src_dtype = torch.bool)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.bool, src_dtype = torch.int64)
        logical_or = ops.logical_or(to_dtype_1, to_dtype_3)
        logical_not_2 = ops.logical_not(logical_or)
        bitwise_and = ops.bitwise_and(le, logical_not_2)
        to_dtype_4 = ops.to_dtype(bitwise_and, torch.float32, src_dtype = torch.bool)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, to_dtype_4, None)
        return store


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 49104}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf79', 3*c0 + ModularIndexing(c1 + 1, 1, 3), {c0: 16368, c1: 3}, None),
        MemoryDep('buf79', 3*c0 + ModularIndexing(c1 + 2, 1, 3), {c0: 16368, c1: 3}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg10_1', 3*c0 + c2, {c0: 16, c1: 1023, c2: 3}, None),
        MemoryDep('arg11_1', 3*c0 + ModularIndexing(c2 + 1, 1, 3), {c0: 16, c1: 1023, c2: 3}, None),
        MemoryDep('arg11_1', 3*c0 + ModularIndexing(c2 + 2, 1, 3), {c0: 16, c1: 1023, c2: 3}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cpu
op116.group.iteration = ((16, 1023, 3), ())
op116.sizes = ([16, 1023, 3], [])
arg10_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
arg11_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg11_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op116_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = 3*z0 + z2
    index1 = ModularIndexing(z2 + 1, 1, 3)
    index2 = 3
    index3 = 3*z0 + ModularIndexing(z2 + 1, 1, 3)
    index4 = ModularIndexing(z2 + 2, 1, 3)
    index5 = 3069*z0 + 3*z1 + ModularIndexing(z2 + 2, 1, 3)
    index6 = 3*z0 + ModularIndexing(z2 + 2, 1, 3)
    index7 = 3069*z0 + 3*z1 + ModularIndexing(z2 + 1, 1, 3)
    index8 = 3069*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg10_1', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg11_1', get_index_3)
        get_index_4 = self.get_index('index4')
        get_index_5 = self.get_index('index2')
        check_bounds_1 = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('buf79', get_index_6)
        mul = ops.mul(load_1, load_2)
        get_index_7 = self.get_index('index4')
        get_index_8 = self.get_index('index2')
        check_bounds_2 = ops.check_bounds(get_index_7, get_index_8, False, False)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('arg11_1', get_index_9)
        get_index_10 = self.get_index('index1')
        get_index_11 = self.get_index('index2')
        check_bounds_3 = ops.check_bounds(get_index_10, get_index_11, False, False)
        get_index_12 = self.get_index('index7')
        load_4 = ops.load('buf79', get_index_12)
        mul_1 = ops.mul(load_3, load_4)
        sub = ops.sub(mul, mul_1)
        add = ops.add(load, sub)
        get_index_13 = self.get_index('index8')
        store = ops.store('buf116', get_index_13, add, None)
        return store


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 32736}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf75', 3069*c0 + 3*c2 + 1, {c0: 16, c1: 2, c2: 1023}, None),
        MemoryDep('buf75', 3069*c0 + 3*c2, {c0: 16, c1: 2, c2: 1023}, None)]
op117.met_dependencies = [MemoryDep('arg9_1', 65536*c0 + 256*tmp0 + tmp1, {c0: 32}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cpu', torch.float32, size=[16, 2, 1023, 1], stride=[2046, 1023, 1, 32736])
    buf117.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
]
op117.group.device = cpu
op117.group.iteration = ((16, 2, 1023), ())
op117.sizes = ([16, 2, 1023], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg9_1_layout = FixedLayout('cpu', torch.float32, size=[16, 2, 256, 256], stride=[131072, 65536, 256, 1])
buf117_layout = FixedLayout('cpu', torch.float32, size=[16, 2, 1023, 1], stride=[2046, 1023, 1, 32736])
class op117_loop_body:
    var_ranges = {z0: 16, z1: 2, z2: 1023}
    index0 = z0
    index1 = 16
    index2 = z1
    index3 = 2
    index4 = 3069*z0 + 3*z2
    index5 = 3069*z0 + 3*z2 + 1
    index6 = 256*indirect0 + indirect1 + 131072*z0 + 65536*z1
    index7 = 2046*z0 + 1023*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf75', get_index_4)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf75', get_index_5)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('buf75', get_index_6)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_17)
        get_index_7 = self.get_index('index5')
        load_3 = ops.load('buf75', get_index_7)
        constant_18 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_18)
        constant_19 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_20)
        constant_21 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        add_3 = ops.add(mul_7, constant_22)
        floor_3 = ops.floor(add_3)
        constant_23 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_23)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_8 = self.get_index('index5')
        load_4 = ops.load('buf75', get_index_8)
        constant_24 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_24)
        constant_25 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_25)
        constant_26 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_26)
        constant_27 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_27)
        constant_28 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_9, constant_28)
        floor_4 = ops.floor(add_4)
        to_dtype = ops.to_dtype(floor_4, torch.int64, src_dtype = torch.float32)
        constant_29 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_29)
        set_indirect0 = self.set_indirect0(where)
        get_index_9 = self.get_index('index4')
        load_5 = ops.load('buf75', get_index_9)
        constant_30 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_30)
        constant_31 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_31)
        constant_32 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_32)
        constant_33 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_33)
        constant_34 = ops.constant(127.5, torch.float32)
        add_5 = ops.add(mul_11, constant_34)
        floor_5 = ops.floor(add_5)
        constant_35 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(floor_5, constant_35)
        get_index_10 = self.get_index('index4')
        load_6 = ops.load('buf75', get_index_10)
        constant_36 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_36)
        constant_37 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_37)
        constant_38 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_38)
        constant_39 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_39)
        constant_40 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_13, constant_40)
        floor_6 = ops.floor(add_6)
        constant_41 = ops.constant(256.0, torch.float32)
        lt_2 = ops.lt(floor_6, constant_41)
        get_index_11 = self.get_index('index5')
        load_7 = ops.load('buf75', get_index_11)
        constant_42 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_42)
        constant_43 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_43)
        constant_44 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_44)
        constant_45 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_45)
        constant_46 = ops.constant(127.5, torch.float32)
        add_7 = ops.add(mul_15, constant_46)
        floor_7 = ops.floor(add_7)
        constant_47 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(floor_7, constant_47)
        get_index_12 = self.get_index('index5')
        load_8 = ops.load('buf75', get_index_12)
        constant_48 = ops.constant(0.15625, torch.float32)
        mul_16 = ops.mul(load_8, constant_48)
        constant_49 = ops.constant(-1.0, torch.float32)
        maximum_8 = ops.maximum(mul_16, constant_49)
        constant_50 = ops.constant(1.0, torch.float32)
        minimum_8 = ops.minimum(maximum_8, constant_50)
        constant_51 = ops.constant(127.5, torch.float32)
        mul_17 = ops.mul(minimum_8, constant_51)
        constant_52 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_17, constant_52)
        floor_8 = ops.floor(add_8)
        constant_53 = ops.constant(256.0, torch.float32)
        lt_3 = ops.lt(floor_8, constant_53)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_13 = self.get_index('index4')
        load_9 = ops.load('buf75', get_index_13)
        constant_54 = ops.constant(0.15625, torch.float32)
        mul_18 = ops.mul(load_9, constant_54)
        constant_55 = ops.constant(-1.0, torch.float32)
        maximum_9 = ops.maximum(mul_18, constant_55)
        constant_56 = ops.constant(1.0, torch.float32)
        minimum_9 = ops.minimum(maximum_9, constant_56)
        constant_57 = ops.constant(127.5, torch.float32)
        mul_19 = ops.mul(minimum_9, constant_57)
        constant_58 = ops.constant(127.5, torch.float32)
        add_9 = ops.add(mul_19, constant_58)
        floor_9 = ops.floor(add_9)
        to_dtype_1 = ops.to_dtype(floor_9, torch.int64, src_dtype = torch.float32)
        constant_59 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_59)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_14 = self.get_index('index6')
        load_10 = ops.load('arg9_1', get_index_14)
        get_index_15 = self.get_index('index7')
        store = ops.store('buf117', get_index_15, load_10, None)
        return store


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 16368}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op118.group.device = cpu
op118.group.iteration = ((16368,), ())
op118.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf118_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op118_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_17)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_18 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_18)
        constant_19 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_20)
        constant_21 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        add_3 = ops.add(mul_7, constant_22)
        floor_3 = ops.floor(add_3)
        constant_23 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_23)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_24 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_24)
        constant_25 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_25)
        constant_26 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_26)
        constant_27 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_27)
        constant_28 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_9, constant_28)
        floor_4 = ops.floor(add_4)
        constant_29 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_4, constant_29)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        constant_30 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_30)
        constant_31 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_31)
        constant_32 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_32)
        constant_33 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_33)
        constant_34 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_11, constant_34)
        sub = ops.sub(add_5, add_6)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf75', get_index_6)
        constant_35 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_35)
        constant_36 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_36)
        constant_37 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_37)
        constant_38 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_38)
        constant_39 = ops.constant(127.5, torch.float32)
        add_7 = ops.add(mul_13, constant_39)
        floor_5 = ops.floor(add_7)
        constant_40 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(floor_5, constant_40)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf75', get_index_7)
        constant_41 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_41)
        constant_42 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_42)
        constant_43 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_43)
        constant_44 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_44)
        constant_45 = ops.constant(127.5, torch.float32)
        add_9 = ops.add(mul_15, constant_45)
        sub_1 = ops.sub(add_8, add_9)
        mul_16 = ops.mul(sub, sub_1)
        constant_46 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_16, constant_46)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf118', get_index_8, where, None)
        return store


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 16368}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op119.group.device = cpu
op119.group.iteration = ((16368,), ())
op119.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf119_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op119_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_19)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_20 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_20)
        constant_21 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_21)
        constant_22 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        add_5 = ops.add(mul_7, constant_24)
        floor_3 = ops.floor(add_5)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        to_dtype = ops.to_dtype(floor_4, torch.int64, src_dtype = torch.float32)
        constant_31 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_31)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf119', get_index_5, where, None)
        return store


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 16368}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf120.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op120.group.device = cpu
op120.group.iteration = ((16368,), ())
op120.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf120_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op120_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_19)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_20 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_20)
        constant_21 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_21)
        constant_22 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        add_5 = ops.add(mul_7, constant_24)
        floor_3 = ops.floor(add_5)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        constant_31 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_31)
        to_dtype = ops.to_dtype(add_7, torch.int64, src_dtype = torch.float32)
        constant_32 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_32)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf120', get_index_5, where, None)
        return store


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 16368}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op121.group.device = cpu
op121.group.iteration = ((16368,), ())
op121.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf121_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op121_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_19)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_20 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_20)
        constant_21 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_21)
        constant_22 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        add_5 = ops.add(mul_7, constant_24)
        floor_3 = ops.floor(add_5)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        constant_31 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_31)
        constant_32 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_32)
        constant_33 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_33)
        constant_34 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_34)
        constant_35 = ops.constant(127.5, torch.float32)
        add_7 = ops.add(mul_11, constant_35)
        floor_4 = ops.floor(add_7)
        sub = ops.sub(add_6, floor_4)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf75', get_index_6)
        constant_36 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_36)
        constant_37 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_37)
        constant_38 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_38)
        constant_39 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_39)
        constant_40 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_13, constant_40)
        floor_5 = ops.floor(add_8)
        constant_41 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_5, constant_41)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf75', get_index_7)
        constant_42 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_42)
        constant_43 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_43)
        constant_44 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_44)
        constant_45 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_45)
        constant_46 = ops.constant(127.5, torch.float32)
        add_10 = ops.add(mul_15, constant_46)
        sub_1 = ops.sub(add_9, add_10)
        mul_16 = ops.mul(sub, sub_1)
        constant_47 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_16, constant_47)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf121', get_index_8, where, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 16368}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op122.group.device = cpu
op122.group.iteration = ((16368,), ())
op122.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf122_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op122_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_18)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_19 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_19)
        constant_20 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_20)
        constant_21 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_7, constant_23)
        floor_3 = ops.floor(add_4)
        constant_24 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_24)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        constant_31 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_31)
        to_dtype = ops.to_dtype(add_7, torch.int64, src_dtype = torch.float32)
        constant_32 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_32)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf122', get_index_5, where, None)
        return store


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 16368}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.group.device = cpu
op123.group.iteration = ((16368,), ())
op123.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf123_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op123_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_18)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_19 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_19)
        constant_20 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_20)
        constant_21 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_7, constant_23)
        floor_3 = ops.floor(add_4)
        constant_24 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_24)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        to_dtype = ops.to_dtype(floor_4, torch.int64, src_dtype = torch.float32)
        constant_31 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_31)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf123', get_index_5, where, None)
        return store


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 16368}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cpu
op124.group.iteration = ((16368,), ())
op124.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf124_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op124_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_5)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_6 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_6)
        constant_7 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_8)
        constant_9 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        add_1 = ops.add(mul_3, constant_10)
        floor_1 = ops.floor(add_1)
        constant_11 = ops.constant(256.0, torch.float32)
        lt = ops.lt(floor_1, constant_11)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_12 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_12)
        constant_13 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_13)
        constant_14 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_14)
        constant_15 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_15)
        constant_16 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_5, constant_16)
        floor_2 = ops.floor(add_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_18)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_19 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_19)
        constant_20 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_20)
        constant_21 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_21)
        constant_22 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_22)
        constant_23 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_7, constant_23)
        floor_3 = ops.floor(add_4)
        constant_24 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_24)
        constant_25 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_25)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_26 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_26)
        constant_27 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_28)
        constant_29 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_29)
        constant_30 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_9, constant_30)
        floor_4 = ops.floor(add_6)
        constant_31 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_31)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        constant_32 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_32)
        constant_33 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_33)
        constant_34 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_34)
        constant_35 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_35)
        constant_36 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_11, constant_36)
        sub = ops.sub(add_7, add_8)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf75', get_index_6)
        constant_37 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_37)
        constant_38 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_38)
        constant_39 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_39)
        constant_40 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_40)
        constant_41 = ops.constant(127.5, torch.float32)
        add_9 = ops.add(mul_13, constant_41)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf75', get_index_7)
        constant_42 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_42)
        constant_43 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_43)
        constant_44 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_44)
        constant_45 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_45)
        constant_46 = ops.constant(127.5, torch.float32)
        add_10 = ops.add(mul_15, constant_46)
        floor_5 = ops.floor(add_10)
        sub_1 = ops.sub(add_9, floor_5)
        mul_16 = ops.mul(sub, sub_1)
        constant_47 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_16, constant_47)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf124', get_index_8, where, None)
        return store


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 32736}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 32736}, None),
        MemoryDep('buf118', 1023*c0 + c2, {c0: 16, c1: 2, c2: 1023}, None),
        MemoryDep('buf119', 1023*c0 + c2, {c0: 16, c1: 2, c2: 1023}, None),
        MemoryDep('buf120', 1023*c0 + c2, {c0: 16, c1: 2, c2: 1023}, None),
        MemoryDep('buf121', 1023*c0 + c2, {c0: 16, c1: 2, c2: 1023}, None),
        MemoryDep('buf122', 1023*c0 + c2, {c0: 16, c1: 2, c2: 1023}, None),
        MemoryDep('buf123', 1023*c0 + c2, {c0: 16, c1: 2, c2: 1023}, None),
        MemoryDep('buf124', 1023*c0 + c2, {c0: 16, c1: 2, c2: 1023}, None)]
op125.met_dependencies = 
    [   MemoryDep('arg9_1', 65536*c0 + 256*tmp0 + tmp1, {c0: 32}, None),
        MemoryDep('arg9_1', 65536*c0 + 256*tmp2 + tmp3, {c0: 32}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cpu', torch.float32, size=[16, 2, 1023, 1], stride=[2046, 1023, 1, 32736])
    buf125.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op125.group.device = cpu
op125.group.iteration = ((16, 2, 1023), ())
op125.sizes = ([16, 2, 1023], [])
buf117_layout = FixedLayout('cpu', torch.float32, size=[16, 2, 1023, 1], stride=[2046, 1023, 1, 32736])
buf118_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf119_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
buf120_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
arg9_1_layout = FixedLayout('cpu', torch.float32, size=[16, 2, 256, 256], stride=[131072, 65536, 256, 1])
buf121_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf122_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
buf123_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
arg9_1_layout = FixedLayout('cpu', torch.float32, size=[16, 2, 256, 256], stride=[131072, 65536, 256, 1])
buf124_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf125_layout = FixedLayout('cpu', torch.float32, size=[16, 2, 1023, 1], stride=[2046, 1023, 1, 32736])
class op125_loop_body:
    var_ranges = {z0: 16, z1: 2, z2: 1023}
    index0 = 2046*z0 + 1023*z1 + z2
    index1 = 1023*z0 + z2
    index2 = z0
    index3 = 16
    index4 = z1
    index5 = 2
    index6 = 256*indirect0 + indirect1 + 131072*z0 + 65536*z1
    index7 = 256*indirect2 + indirect3 + 131072*z0 + 65536*z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        get_index_5 = self.get_index('index5')
        check_bounds_1 = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('buf119', get_index_6)
        set_indirect0 = self.set_indirect0(load_2)
        get_index_7 = self.get_index('index1')
        load_3 = ops.load('buf120', get_index_7)
        set_indirect1 = self.set_indirect1(load_3)
        get_index_8 = self.get_index('index6')
        load_4 = ops.load('arg9_1', get_index_8)
        get_index_9 = self.get_index('index1')
        load_5 = ops.load('buf121', get_index_9)
        mul_1 = ops.mul(load_4, load_5)
        add = ops.add(mul, mul_1)
        get_index_10 = self.get_index('index2')
        get_index_11 = self.get_index('index3')
        check_bounds_2 = ops.check_bounds(get_index_10, get_index_11, False, False)
        get_index_12 = self.get_index('index4')
        get_index_13 = self.get_index('index5')
        check_bounds_3 = ops.check_bounds(get_index_12, get_index_13, False, False)
        get_index_14 = self.get_index('index1')
        load_6 = ops.load('buf122', get_index_14)
        set_indirect2 = self.set_indirect2(load_6)
        get_index_15 = self.get_index('index1')
        load_7 = ops.load('buf123', get_index_15)
        set_indirect3 = self.set_indirect3(load_7)
        get_index_16 = self.get_index('index7')
        load_8 = ops.load('arg9_1', get_index_16)
        get_index_17 = self.get_index('index1')
        load_9 = ops.load('buf124', get_index_17)
        mul_2 = ops.mul(load_8, load_9)
        add_1 = ops.add(add, mul_2)
        get_index_18 = self.get_index('index0')
        store = ops.store('buf125', get_index_18, add_1, None)
        return store


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 16368}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op126.group.device = cpu
op126.group.iteration = ((16368,), ())
op126.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf126_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op126_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_19)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_20)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_21 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_21)
        constant_22 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_22)
        constant_23 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_24)
        constant_25 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_7, constant_25)
        floor_3 = ops.floor(add_6)
        constant_26 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_26)
        constant_27 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_27)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf75', get_index_4)
        constant_28 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_28)
        constant_29 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_30)
        constant_31 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_31)
        constant_32 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_9, constant_32)
        floor_4 = ops.floor(add_8)
        constant_33 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_33)
        to_dtype = ops.to_dtype(add_9, torch.int64, src_dtype = torch.float32)
        constant_34 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_34)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf126', get_index_5, where, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 16368}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op127.group.device = cpu
op127.group.iteration = ((16368,), ())
op127.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf127_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
class op127_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_19)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_20)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_21 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_21)
        constant_22 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_22)
        constant_23 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_24)
        constant_25 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_7, constant_25)
        floor_3 = ops.floor(add_6)
        constant_26 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_26)
        constant_27 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_27)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_28 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_28)
        constant_29 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_30)
        constant_31 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_31)
        constant_32 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_9, constant_32)
        floor_4 = ops.floor(add_8)
        constant_33 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_33)
        to_dtype = ops.to_dtype(add_9, torch.int64, src_dtype = torch.float32)
        constant_34 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_34)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf127', get_index_5, where, None)
        return store


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 16368}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf75', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf75', 3*c0, {c0: 16368}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cpu
op128.group.iteration = ((16368,), ())
op128.sizes = ([16368], [])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf75_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf128_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
class op128_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        constant = ops.constant(0.15625, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(mul, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(127.5, torch.float32)
        mul_1 = ops.mul(minimum, constant_3)
        constant_4 = ops.constant(127.5, torch.float32)
        add = ops.add(mul_1, constant_4)
        floor = ops.floor(add)
        constant_5 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_6)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        constant_7 = ops.constant(0.15625, torch.float32)
        mul_2 = ops.mul(load_1, constant_7)
        constant_8 = ops.constant(-1.0, torch.float32)
        maximum_1 = ops.maximum(mul_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        constant_10 = ops.constant(127.5, torch.float32)
        mul_3 = ops.mul(minimum_1, constant_10)
        constant_11 = ops.constant(127.5, torch.float32)
        add_2 = ops.add(mul_3, constant_11)
        floor_1 = ops.floor(add_2)
        constant_12 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_12)
        constant_13 = ops.constant(256.0, torch.float32)
        lt = ops.lt(add_3, constant_13)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant_14 = ops.constant(0.15625, torch.float32)
        mul_4 = ops.mul(load_2, constant_14)
        constant_15 = ops.constant(-1.0, torch.float32)
        maximum_2 = ops.maximum(mul_4, constant_15)
        constant_16 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_16)
        constant_17 = ops.constant(127.5, torch.float32)
        mul_5 = ops.mul(minimum_2, constant_17)
        constant_18 = ops.constant(127.5, torch.float32)
        add_4 = ops.add(mul_5, constant_18)
        floor_2 = ops.floor(add_4)
        constant_19 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_19)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_20)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf75', get_index_3)
        constant_21 = ops.constant(0.15625, torch.float32)
        mul_6 = ops.mul(load_3, constant_21)
        constant_22 = ops.constant(-1.0, torch.float32)
        maximum_3 = ops.maximum(mul_6, constant_22)
        constant_23 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_23)
        constant_24 = ops.constant(127.5, torch.float32)
        mul_7 = ops.mul(minimum_3, constant_24)
        constant_25 = ops.constant(127.5, torch.float32)
        add_6 = ops.add(mul_7, constant_25)
        floor_3 = ops.floor(add_6)
        constant_26 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_26)
        constant_27 = ops.constant(256.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_27)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf75', get_index_4)
        constant_28 = ops.constant(0.15625, torch.float32)
        mul_8 = ops.mul(load_4, constant_28)
        constant_29 = ops.constant(-1.0, torch.float32)
        maximum_4 = ops.maximum(mul_8, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_30)
        constant_31 = ops.constant(127.5, torch.float32)
        mul_9 = ops.mul(minimum_4, constant_31)
        constant_32 = ops.constant(127.5, torch.float32)
        add_8 = ops.add(mul_9, constant_32)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        constant_33 = ops.constant(0.15625, torch.float32)
        mul_10 = ops.mul(load_5, constant_33)
        constant_34 = ops.constant(-1.0, torch.float32)
        maximum_5 = ops.maximum(mul_10, constant_34)
        constant_35 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(maximum_5, constant_35)
        constant_36 = ops.constant(127.5, torch.float32)
        mul_11 = ops.mul(minimum_5, constant_36)
        constant_37 = ops.constant(127.5, torch.float32)
        add_9 = ops.add(mul_11, constant_37)
        floor_4 = ops.floor(add_9)
        sub = ops.sub(add_8, floor_4)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf75', get_index_6)
        constant_38 = ops.constant(0.15625, torch.float32)
        mul_12 = ops.mul(load_6, constant_38)
        constant_39 = ops.constant(-1.0, torch.float32)
        maximum_6 = ops.maximum(mul_12, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        minimum_6 = ops.minimum(maximum_6, constant_40)
        constant_41 = ops.constant(127.5, torch.float32)
        mul_13 = ops.mul(minimum_6, constant_41)
        constant_42 = ops.constant(127.5, torch.float32)
        add_10 = ops.add(mul_13, constant_42)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf75', get_index_7)
        constant_43 = ops.constant(0.15625, torch.float32)
        mul_14 = ops.mul(load_7, constant_43)
        constant_44 = ops.constant(-1.0, torch.float32)
        maximum_7 = ops.maximum(mul_14, constant_44)
        constant_45 = ops.constant(1.0, torch.float32)
        minimum_7 = ops.minimum(maximum_7, constant_45)
        constant_46 = ops.constant(127.5, torch.float32)
        mul_15 = ops.mul(minimum_7, constant_46)
        constant_47 = ops.constant(127.5, torch.float32)
        add_11 = ops.add(mul_15, constant_47)
        floor_5 = ops.floor(add_11)
        sub_1 = ops.sub(add_10, floor_5)
        mul_16 = ops.mul(sub, sub_1)
        constant_48 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_16, constant_48)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf128', get_index_8, where, None)
        return store


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', 3*c0 + c1, {c0: 16368, c1: 2}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf125', 2046*c0 + c1 + 1023*c2, {c0: 16, c1: 1023, c2: 2}, None),
        MemoryDep('buf126', c0, {c0: 16368}, None),
        MemoryDep('buf127', c0, {c0: 16368}, None),
        MemoryDep('buf128', c0, {c0: 16368}, None)]
op129.met_dependencies = [   MemoryDep('arg9_1', 131072*c0 + 65536*c2 + 256*tmp0 + tmp1, {c0: 16, c1: 1023, c2: 2}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1023, 2], stride=[3069, 3, 1])
    buf129.aliases = ['buf131']
    buf129.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op129.group.device = cpu
op129.group.iteration = ((16, 1023, 2), ())
op129.sizes = ([16, 1023, 2], [])
buf125_layout = FixedLayout('cpu', torch.float32, size=[16, 2, 1023, 1], stride=[2046, 1023, 1, 32736])
buf126_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
buf127_layout = FixedLayout('cpu', torch.int64, size=[16, 1023, 1], stride=[1023, 1, 1])
arg9_1_layout = FixedLayout('cpu', torch.float32, size=[16, 2, 256, 256], stride=[131072, 65536, 256, 1])
buf128_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf129_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1023, 2], stride=[3069, 3, 1])
class op129_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 2}
    index0 = 2046*z0 + z1 + 1023*z2
    index1 = z0
    index2 = 16
    index3 = z2
    index4 = 2
    index5 = 1023*z0 + z1
    index6 = 256*indirect0 + indirect1 + 131072*z0 + 65536*z2
    index7 = 3069*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        get_index_4 = self.get_index('index4')
        check_bounds_1 = ops.check_bounds(get_index_3, get_index_4, False, False)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf126', get_index_5)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('buf127', get_index_6)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_7 = self.get_index('index6')
        load_3 = ops.load('arg9_1', get_index_7)
        get_index_8 = self.get_index('index5')
        load_4 = ops.load('buf128', get_index_8)
        mul = ops.mul(load_3, load_4)
        add = ops.add(load, mul)
        neg = ops.neg(add)
        get_index_9 = self.get_index('index7')
        store = ops.store('buf129', get_index_9, neg, None)
        return store


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', 3*c0, {c0: 16368}, None)]
op130.unmet_dependencies = []
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = NonOwningLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[3069, 3, 1])
    buf130.aliases = ['buf131']
    buf130.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op130.group.device = cpu
op130.group.iteration = ((16368,), ())
op130.sizes = ([16368], [])
buf130_layout = NonOwningLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[3069, 3, 1])
class op130_loop_body:
    var_ranges = {z0: 16368}
    index0 = 3*z0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf130', get_index, constant, None)
        return store


op131: NopKernelSchedulerNode(ConcatKernel)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf129', mode=None), StarDep(name='buf130', mode=None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ConcatKernel
    buf131.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf131.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 49104}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf131', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf131', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf131', 3*c0, {c0: 16368}, None),
        MemoryDep('buf131', c0, {c0: 49104}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op132.group.device = cpu
op132.group.iteration = ((16368, 3), ())
op132.sizes = ([16368, 3], [])
buf131_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf131_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf131_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf131_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op132_loop_body:
    var_ranges = {z0: 16368, z1: 3}
    index0 = 3*z0 + z1
    index1 = 3*z0
    index2 = 3*z0 + 1
    index3 = 3*z0 + 2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        mul = ops.mul(load_1, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf131', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        add = ops.add(mul, mul_1)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf131', get_index_3)
        mul_2 = ops.mul(load_3, load_3)
        add_1 = ops.add(add, mul_2)
        sqrt = ops.sqrt(add_1)
        constant = ops.constant(1e-06, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf132', get_index_4, truediv, None)
        return store


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 16368}, None)]
op133.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 16368}, None),
        MemoryDep('buf115', c0, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0, {c0: 16368}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.group.device = cpu
op133.group.iteration = ((16368,), ())
op133.sizes = ([16368], [])
buf114_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
buf115_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf133_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
class op133_loop_body:
    var_ranges = {z0: 16368}
    index0 = z0
    index1 = 3*z0
    index2 = 3*z0 + 1
    index3 = 3*z0 + 2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        mul = ops.mul(load, load_1)
        constant = ops.constant(30000.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf116', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf132', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf116', get_index_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf132', get_index_5)
        mul_3 = ops.mul(load_4, load_5)
        add = ops.add(mul_2, mul_3)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf116', get_index_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('buf132', get_index_7)
        mul_4 = ops.mul(load_6, load_7)
        add_1 = ops.add(add, mul_4)
        constant_1 = ops.constant(2852.367437761131, torch.float32)
        mul_5 = ops.mul(add_1, constant_1)
        add_2 = ops.add(mul_1, mul_5)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf133', get_index_8, add_2, None)
        return store


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 16}, None)]
op134.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 16368}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.group.device = cpu
op134.group.iteration = ((16,), (1023,))
op134.sizes = ([16], [1023])
buf115_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf134_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
class op134_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 1023*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf134', get_index_1, reduction)
        return store_reduction


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 49104}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 16368}, None),
        MemoryDep('buf132', c0, {c0: 49104}, None),
        MemoryDep('buf133', c0, {c0: 16368}, None),
        MemoryDep('buf134', c0, {c0: 16}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cpu
op135.group.iteration = ((16, 1023, 3), ())
op135.sizes = ([16, 1023, 3], [])
buf133_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf115_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 1])
buf134_layout = FixedLayout('cpu', torch.float32, size=[16, 1, 1], stride=[1, 16, 16])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op135_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = 1023*z0 + z1
    index1 = 3069*z0 + 3*z1 + z2
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        neg = ops.neg(load_1)
        mul = ops.mul(load, neg)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf115', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf134', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        maximum = ops.maximum(load_3, constant)
        truediv = ops.truediv(mul_1, maximum)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf135', get_index_4, truediv, None)
        return store


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 48}, None)]
op136.unmet_dependencies = []
op136.met_dependencies = 
    [   MemoryDep('arg12_1', 8*c0, {c0: 16}, None),
        MemoryDep('arg6_1', 3*c0, {c0: 48}, None),
        MemoryDep('arg6_1', 9*c0 + 3, {c0: 16}, None),
        MemoryDep('arg6_1', 9*c0 + 6, {c0: 16}, None),
        MemoryDep('arg6_1', 9*c0, {c0: 16}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
    ]
]
op136.group.device = cpu
op136.group.iteration = ((16, 3), ())
op136.sizes = ([16, 3], [])
arg12_1_layout = FixedLayout('cpu', torch.float32, size=[16, 8], stride=[8, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf136_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op136_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 8*z0
    index1 = 9*z0 + 3*z1
    index2 = 9*z0
    index3 = 9*z0 + 3
    index4 = 9*z0 + 6
    index5 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg12_1', get_index)
        constant = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg6_1', get_index_2)
        mul = ops.mul(load_2, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(load_3, load_3)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg6_1', get_index_4)
        mul_2 = ops.mul(load_4, load_4)
        add_1 = ops.add(add, mul_2)
        sqrt = ops.sqrt(add_1)
        constant_2 = ops.constant(1e-06, torch.float32)
        maximum_1 = ops.maximum(sqrt, constant_2)
        truediv = ops.truediv(load_1, maximum_1)
        mul_3 = ops.mul(minimum, truediv)
        get_index_5 = self.get_index('index5')
        store = ops.store('buf136', get_index_5, mul_3, None)
        return store


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 16368}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf116', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0, {c0: 16368}, None),
        MemoryDep('buf136', 3*c0 + 1, {c0: 16}, None),
        MemoryDep('buf136', 3*c0 + 2, {c0: 16}, None),
        MemoryDep('buf136', 3*c0, {c0: 16}, None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
    buf137.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op137.group.device = cpu
op137.group.iteration = ((16, 1023), ())
op137.sizes = ([16, 1023], [])
buf136_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf136_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf136_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf137_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
class op137_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 3*z0
    index1 = 3069*z0 + 3*z1
    index2 = 3*z0 + 1
    index3 = 3069*z0 + 3*z1 + 1
    index4 = 3*z0 + 2
    index5 = 3069*z0 + 3*z1 + 2
    index6 = 1023*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf136', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf116', get_index_4)
        sub_1 = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf132', get_index_5)
        mul_1 = ops.mul(sub_1, load_5)
        add = ops.add(mul, mul_1)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('buf136', get_index_6)
        get_index_7 = self.get_index('index5')
        load_7 = ops.load('buf116', get_index_7)
        sub_2 = ops.sub(load_6, load_7)
        get_index_8 = self.get_index('index5')
        load_8 = ops.load('buf132', get_index_8)
        mul_2 = ops.mul(sub_2, load_8)
        add_1 = ops.add(add, mul_2)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf137', get_index_9, add_1, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 48}, None)]
op138.unmet_dependencies = []
op138.met_dependencies = 
    [   MemoryDep('arg12_1', 8*c0 + 1, {c0: 16}, None),
        MemoryDep('arg6_1', 3*c0, {c0: 48}, None),
        MemoryDep('arg6_1', 9*c0 + 3, {c0: 16}, None),
        MemoryDep('arg6_1', 9*c0 + 6, {c0: 16}, None),
        MemoryDep('arg6_1', 9*c0, {c0: 16}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
    ]
]
op138.group.device = cpu
op138.group.iteration = ((16, 3), ())
op138.sizes = ([16, 3], [])
arg12_1_layout = FixedLayout('cpu', torch.float32, size=[16, 8], stride=[8, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf138_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op138_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 8*z0 + 1
    index1 = 9*z0 + 3*z1
    index2 = 9*z0
    index3 = 9*z0 + 3
    index4 = 9*z0 + 6
    index5 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg12_1', get_index)
        constant = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg6_1', get_index_2)
        mul = ops.mul(load_2, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(load_3, load_3)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg6_1', get_index_4)
        mul_2 = ops.mul(load_4, load_4)
        add_1 = ops.add(add, mul_2)
        sqrt = ops.sqrt(add_1)
        constant_2 = ops.constant(1e-06, torch.float32)
        maximum_1 = ops.maximum(sqrt, constant_2)
        truediv = ops.truediv(load_1, maximum_1)
        mul_3 = ops.mul(minimum, truediv)
        get_index_5 = self.get_index('index5')
        store = ops.store('buf138', get_index_5, mul_3, None)
        return store


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 16368}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf116', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0, {c0: 16368}, None),
        MemoryDep('buf138', 3*c0 + 1, {c0: 16}, None),
        MemoryDep('buf138', 3*c0 + 2, {c0: 16}, None),
        MemoryDep('buf138', 3*c0, {c0: 16}, None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cpu
op139.group.iteration = ((16, 1023), ())
op139.sizes = ([16, 1023], [])
buf138_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf138_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf138_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf139_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
class op139_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 3*z0
    index1 = 3069*z0 + 3*z1
    index2 = 3*z0 + 1
    index3 = 3069*z0 + 3*z1 + 1
    index4 = 3*z0 + 2
    index5 = 3069*z0 + 3*z1 + 2
    index6 = 1023*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf138', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf116', get_index_4)
        sub_1 = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf132', get_index_5)
        mul_1 = ops.mul(sub_1, load_5)
        add = ops.add(mul, mul_1)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('buf138', get_index_6)
        get_index_7 = self.get_index('index5')
        load_7 = ops.load('buf116', get_index_7)
        sub_2 = ops.sub(load_6, load_7)
        get_index_8 = self.get_index('index5')
        load_8 = ops.load('buf132', get_index_8)
        mul_2 = ops.mul(sub_2, load_8)
        add_1 = ops.add(add, mul_2)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf139', get_index_9, add_1, None)
        return store


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 49104}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 49104}, None),
        MemoryDep('buf132', c0, {c0: 49104}, None),
        MemoryDep('buf135', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf135', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf135', 3*c0, {c0: 16368}, None),
        MemoryDep('buf136', 3*c0 + c2, {c0: 16, c1: 1023, c2: 3}, None),
        MemoryDep('buf137', c0, {c0: 16368}, None),
        MemoryDep('buf138', 3*c0 + c2, {c0: 16, c1: 1023, c2: 3}, None),
        MemoryDep('buf139', c0, {c0: 16368}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg3_1', c1 + 1023, {c0: 16, c1: 1023}, None),
        MemoryDep('arg3_1', c1, {c0: 16, c1: 1023}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False)]
]
op140.group.device = cpu
op140.group.iteration = ((16, 1023, 3), ())
op140.sizes = ([16, 1023, 3], [])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf136_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf137_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg3_1_layout = FixedLayout('cpu', torch.float32, size=[4, 1023], stride=[1023, 1])
buf138_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf139_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
arg3_1_layout = FixedLayout('cpu', torch.float32, size=[4, 1023], stride=[1023, 1])
buf140_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op140_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = 3069*z0 + 3*z1
    index1 = 3069*z0 + 3*z1 + 1
    index2 = 3069*z0 + 3*z1 + 2
    index3 = 3*z0 + z2
    index4 = 3069*z0 + 3*z1 + z2
    index5 = 1023*z0 + z1
    index6 = z1
    index7 = z1 + 1023
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        mul = ops.mul(load, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf135', get_index_1)
        mul_1 = ops.mul(load_1, load_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf135', get_index_2)
        mul_2 = ops.mul(load_2, load_2)
        add_1 = ops.add(add, mul_2)
        sqrt = ops.sqrt(add_1)
        constant = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(sqrt, constant)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf136', get_index_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf116', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('buf137', get_index_5)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('buf132', get_index_6)
        mul_4 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_4)
        tanh = ops.tanh(sub_1)
        mul_5 = ops.mul(mul_3, tanh)
        get_index_7 = self.get_index('index6')
        load_7 = ops.load('arg3_1', get_index_7)
        mul_6 = ops.mul(mul_5, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf135', get_index_8)
        mul_7 = ops.mul(load_8, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf135', get_index_9)
        mul_8 = ops.mul(load_9, load_9)
        add_2 = ops.add(mul_7, mul_8)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('buf135', get_index_10)
        mul_9 = ops.mul(load_10, load_10)
        add_3 = ops.add(add_2, mul_9)
        sqrt_1 = ops.sqrt(add_3)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_10 = ops.mul(sqrt_1, constant_1)
        get_index_11 = self.get_index('index3')
        load_11 = ops.load('buf138', get_index_11)
        get_index_12 = self.get_index('index4')
        load_12 = ops.load('buf116', get_index_12)
        sub_2 = ops.sub(load_11, load_12)
        get_index_13 = self.get_index('index5')
        load_13 = ops.load('buf139', get_index_13)
        get_index_14 = self.get_index('index4')
        load_14 = ops.load('buf132', get_index_14)
        mul_11 = ops.mul(load_13, load_14)
        sub_3 = ops.sub(sub_2, mul_11)
        tanh_1 = ops.tanh(sub_3)
        mul_12 = ops.mul(mul_10, tanh_1)
        get_index_15 = self.get_index('index7')
        load_15 = ops.load('arg3_1', get_index_15)
        mul_13 = ops.mul(mul_12, load_15)
        add_4 = ops.add(mul_6, mul_13)
        get_index_16 = self.get_index('index4')
        store = ops.store('buf140', get_index_16, add_4, None)
        return store


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 48}, None)]
op141.unmet_dependencies = []
op141.met_dependencies = 
    [   MemoryDep('arg12_1', 8*c0 + 2, {c0: 16}, None),
        MemoryDep('arg6_1', 3*c0, {c0: 48}, None),
        MemoryDep('arg6_1', 9*c0 + 3, {c0: 16}, None),
        MemoryDep('arg6_1', 9*c0 + 6, {c0: 16}, None),
        MemoryDep('arg6_1', 9*c0, {c0: 16}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
    ]
]
op141.group.device = cpu
op141.group.iteration = ((16, 3), ())
op141.sizes = ([16, 3], [])
arg12_1_layout = FixedLayout('cpu', torch.float32, size=[16, 8], stride=[8, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf141_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op141_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 8*z0 + 2
    index1 = 9*z0 + 3*z1
    index2 = 9*z0
    index3 = 9*z0 + 3
    index4 = 9*z0 + 6
    index5 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg12_1', get_index)
        constant = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg6_1', get_index_2)
        mul = ops.mul(load_2, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(load_3, load_3)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg6_1', get_index_4)
        mul_2 = ops.mul(load_4, load_4)
        add_1 = ops.add(add, mul_2)
        sqrt = ops.sqrt(add_1)
        constant_2 = ops.constant(1e-06, torch.float32)
        maximum_1 = ops.maximum(sqrt, constant_2)
        truediv = ops.truediv(load_1, maximum_1)
        mul_3 = ops.mul(minimum, truediv)
        get_index_5 = self.get_index('index5')
        store = ops.store('buf141', get_index_5, mul_3, None)
        return store


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 16368}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf116', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0, {c0: 16368}, None),
        MemoryDep('buf141', 3*c0 + 1, {c0: 16}, None),
        MemoryDep('buf141', 3*c0 + 2, {c0: 16}, None),
        MemoryDep('buf141', 3*c0, {c0: 16}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cpu
op142.group.iteration = ((16, 1023), ())
op142.sizes = ([16, 1023], [])
buf141_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf141_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf141_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf142_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
class op142_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 3*z0
    index1 = 3069*z0 + 3*z1
    index2 = 3*z0 + 1
    index3 = 3069*z0 + 3*z1 + 1
    index4 = 3*z0 + 2
    index5 = 3069*z0 + 3*z1 + 2
    index6 = 1023*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf141', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf116', get_index_4)
        sub_1 = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf132', get_index_5)
        mul_1 = ops.mul(sub_1, load_5)
        add = ops.add(mul, mul_1)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('buf141', get_index_6)
        get_index_7 = self.get_index('index5')
        load_7 = ops.load('buf116', get_index_7)
        sub_2 = ops.sub(load_6, load_7)
        get_index_8 = self.get_index('index5')
        load_8 = ops.load('buf132', get_index_8)
        mul_2 = ops.mul(sub_2, load_8)
        add_1 = ops.add(add, mul_2)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf142', get_index_9, add_1, None)
        return store


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 49104}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 49104}, None),
        MemoryDep('buf132', c0, {c0: 49104}, None),
        MemoryDep('buf135', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf135', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf135', 3*c0, {c0: 16368}, None),
        MemoryDep('buf140', c0, {c0: 49104}, None),
        MemoryDep('buf141', 3*c0 + c2, {c0: 16, c1: 1023, c2: 3}, None),
        MemoryDep('buf142', c0, {c0: 16368}, None)]
op143.met_dependencies = [MemoryDep('arg3_1', c1 + 2046, {c0: 16, c1: 1023}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
]
op143.group.device = cpu
op143.group.iteration = ((16, 1023, 3), ())
op143.sizes = ([16, 1023, 3], [])
buf140_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf141_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf142_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg3_1_layout = FixedLayout('cpu', torch.float32, size=[4, 1023], stride=[1023, 1])
buf143_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op143_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = 3069*z0 + 3*z1 + z2
    index1 = 3069*z0 + 3*z1
    index2 = 3069*z0 + 3*z1 + 1
    index3 = 3069*z0 + 3*z1 + 2
    index4 = 3*z0 + z2
    index5 = 1023*z0 + z1
    index6 = z1 + 2046
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf135', get_index_1)
        mul = ops.mul(load_1, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf135', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        add = ops.add(mul, mul_1)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf135', get_index_3)
        mul_2 = ops.mul(load_3, load_3)
        add_1 = ops.add(add, mul_2)
        sqrt = ops.sqrt(add_1)
        constant = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(sqrt, constant)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf141', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf116', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index5')
        load_6 = ops.load('buf142', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf132', get_index_7)
        mul_4 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(sub, mul_4)
        tanh = ops.tanh(sub_1)
        mul_5 = ops.mul(mul_3, tanh)
        get_index_8 = self.get_index('index6')
        load_8 = ops.load('arg3_1', get_index_8)
        mul_6 = ops.mul(mul_5, load_8)
        add_2 = ops.add(load, mul_6)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf143', get_index_9, add_2, None)
        return store


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 48}, None)]
op144.unmet_dependencies = []
op144.met_dependencies = 
    [   MemoryDep('arg12_1', 8*c0 + 3, {c0: 16}, None),
        MemoryDep('arg6_1', 3*c0, {c0: 48}, None),
        MemoryDep('arg6_1', 9*c0 + 3, {c0: 16}, None),
        MemoryDep('arg6_1', 9*c0 + 6, {c0: 16}, None),
        MemoryDep('arg6_1', 9*c0, {c0: 16}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op144.group.device = cpu
op144.group.iteration = ((16, 3), ())
op144.sizes = ([16, 3], [])
arg12_1_layout = FixedLayout('cpu', torch.float32, size=[16, 8], stride=[8, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
arg6_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf144_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op144_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = 8*z0 + 3
    index1 = 9*z0 + 3*z1
    index2 = 9*z0
    index3 = 9*z0 + 3
    index4 = 9*z0 + 6
    index5 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg12_1', get_index)
        constant = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg6_1', get_index_2)
        mul = ops.mul(load_2, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(load_3, load_3)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg6_1', get_index_4)
        mul_2 = ops.mul(load_4, load_4)
        add_1 = ops.add(add, mul_2)
        sqrt = ops.sqrt(add_1)
        constant_2 = ops.constant(1e-06, torch.float32)
        maximum_1 = ops.maximum(sqrt, constant_2)
        truediv = ops.truediv(load_1, maximum_1)
        mul_3 = ops.mul(minimum, truediv)
        get_index_5 = self.get_index('index5')
        store = ops.store('buf144', get_index_5, mul_3, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 16368}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf116', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf116', 3*c0, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf132', 3*c0, {c0: 16368}, None),
        MemoryDep('buf144', 3*c0 + 1, {c0: 16}, None),
        MemoryDep('buf144', 3*c0 + 2, {c0: 16}, None),
        MemoryDep('buf144', 3*c0, {c0: 16}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cpu
op145.group.iteration = ((16, 1023), ())
op145.sizes = ([16, 1023], [])
buf144_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf144_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf144_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf145_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
class op145_loop_body:
    var_ranges = {z0: 16, z1: 1023}
    index0 = 3*z0
    index1 = 3069*z0 + 3*z1
    index2 = 3*z0 + 1
    index3 = 3069*z0 + 3*z1 + 1
    index4 = 3*z0 + 2
    index5 = 3069*z0 + 3*z1 + 2
    index6 = 1023*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf144', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf116', get_index_4)
        sub_1 = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf132', get_index_5)
        mul_1 = ops.mul(sub_1, load_5)
        add = ops.add(mul, mul_1)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('buf144', get_index_6)
        get_index_7 = self.get_index('index5')
        load_7 = ops.load('buf116', get_index_7)
        sub_2 = ops.sub(load_6, load_7)
        get_index_8 = self.get_index('index5')
        load_8 = ops.load('buf132', get_index_8)
        mul_2 = ops.mul(sub_2, load_8)
        add_1 = ops.add(add, mul_2)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf145', get_index_9, add_1, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 49104}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 49104}, None),
        MemoryDep('buf132', c0, {c0: 49104}, None),
        MemoryDep('buf135', 3*c0 + 1, {c0: 16368}, None),
        MemoryDep('buf135', 3*c0 + 2, {c0: 16368}, None),
        MemoryDep('buf135', 3*c0, {c0: 16368}, None),
        MemoryDep('buf143', c0, {c0: 49104}, None),
        MemoryDep('buf144', 3*c0 + c2, {c0: 16, c1: 1023, c2: 3}, None),
        MemoryDep('buf145', c0, {c0: 16368}, None)]
op146.met_dependencies = [MemoryDep('arg3_1', c1 + 3069, {c0: 16, c1: 1023}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op146.group.device = cpu
op146.group.iteration = ((16, 1023, 3), ())
op146.sizes = ([16, 1023, 3], [])
buf143_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf144_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf116_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf145_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 1], stride=[1023, 1, 16368])
buf132_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
arg3_1_layout = FixedLayout('cpu', torch.float32, size=[4, 1023], stride=[1023, 1])
buf146_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
class op146_loop_body:
    var_ranges = {z0: 16, z1: 1023, z2: 3}
    index0 = 3069*z0 + 3*z1 + z2
    index1 = 3069*z0 + 3*z1
    index2 = 3069*z0 + 3*z1 + 1
    index3 = 3069*z0 + 3*z1 + 2
    index4 = 3*z0 + z2
    index5 = 1023*z0 + z1
    index6 = z1 + 3069
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf135', get_index_1)
        mul = ops.mul(load_1, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf135', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        add = ops.add(mul, mul_1)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf135', get_index_3)
        mul_2 = ops.mul(load_3, load_3)
        add_1 = ops.add(add, mul_2)
        sqrt = ops.sqrt(add_1)
        constant = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(sqrt, constant)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf144', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf116', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index5')
        load_6 = ops.load('buf145', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf132', get_index_7)
        mul_4 = ops.mul(load_6, load_7)
        sub_1 = ops.sub(sub, mul_4)
        tanh = ops.tanh(sub_1)
        mul_5 = ops.mul(mul_3, tanh)
        get_index_8 = self.get_index('index6')
        load_8 = ops.load('arg3_1', get_index_8)
        mul_6 = ops.mul(mul_5, load_8)
        add_2 = ops.add(load, mul_6)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf146', get_index_9, add_2, None)
        return store


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 48}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf135', 3069*c0 + 3*c2 + ModularIndexing(c1 + 1, 1, 3), {c0: 16, c1: 3, c2: 1023}, None),
        MemoryDep('buf135', 3069*c0 + 3*c2 + ModularIndexing(c1 + 2, 1, 3), {c0: 16, c1: 3, c2: 1023}, None),
        MemoryDep('buf146', 3069*c0 + 3*c2 + ModularIndexing(c1 + 1, 1, 3), {c0: 16, c1: 3, c2: 1023}, None),
        MemoryDep('buf146', 3069*c0 + 3*c2 + ModularIndexing(c1 + 2, 1, 3), {c0: 16, c1: 3, c2: 1023}, None),
        MemoryDep('buf79', 3069*c0 + 3*c2 + ModularIndexing(c1 + 1, 1, 3), {c0: 16, c1: 3, c2: 1023}, None),
        MemoryDep('buf79', 3069*c0 + 3*c2 + ModularIndexing(c1 + 2, 1, 3), {c0: 16, c1: 3, c2: 1023}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.group.device = cpu
op147.group.iteration = ((16, 3), (1023,))
op147.sizes = ([16, 3], [1023])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf146_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf79_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf146_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf147_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op147_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 1023}
    index0 = ModularIndexing(z1 + 1, 1, 3)
    index1 = 3
    index2 = 3069*z0 + 3*z2 + ModularIndexing(z1 + 1, 1, 3)
    index3 = ModularIndexing(z1 + 2, 1, 3)
    index4 = 3069*z0 + 3*z2 + ModularIndexing(z1 + 2, 1, 3)
    index5 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf79', get_index_2)
        get_index_3 = self.get_index('index3')
        get_index_4 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_3, get_index_4, False, False)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf135', get_index_5)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('buf146', get_index_6)
        add = ops.add(load_1, load_2)
        mul = ops.mul(load, add)
        get_index_7 = self.get_index('index3')
        get_index_8 = self.get_index('index1')
        check_bounds_2 = ops.check_bounds(get_index_7, get_index_8, False, False)
        get_index_9 = self.get_index('index4')
        load_3 = ops.load('buf79', get_index_9)
        get_index_10 = self.get_index('index0')
        get_index_11 = self.get_index('index1')
        check_bounds_3 = ops.check_bounds(get_index_10, get_index_11, False, False)
        get_index_12 = self.get_index('index2')
        load_4 = ops.load('buf135', get_index_12)
        get_index_13 = self.get_index('index2')
        load_5 = ops.load('buf146', get_index_13)
        add_1 = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add_1)
        sub = ops.sub(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', sub)
        get_index_14 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf147', get_index_14, reduction)
        return store_reduction


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 48}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 48}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf148.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op148.group.device = cpu
op148.group.iteration = ((48,), ())
op148.sizes = ([48], [])
buf147_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf148_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op148_loop_body:
    var_ranges = {z0: 48}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        constant = ops.constant(-500.0, torch.float32)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(500.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf148', get_index_1, minimum, None)
        return store


op149: ExternKernelSchedulerNode(FallbackKernel)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf101', mode=None), StarDep(name='buf148', mode=None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: FallbackKernel
    buf149.layout = MultiOutputLayout(device=device(type='cpu'))
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op149.node.kernel = torch.ops.aten._linalg_solve_ex.default


op150: ExternKernelSchedulerNode(MultiOutput)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: MultiOutput
    buf150.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[1, 16])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op150.node.kernel = None


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 48}, None)]
op154.unmet_dependencies = []
op154.met_dependencies = 
    [   MemoryDep('arg10_1', c0, {c0: 48}, None),
        MemoryDep('arg5_1', c0, {c0: 48}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf154.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op154.group.device = cpu
op154.group.iteration = ((48,), ())
op154.sizes = ([48], [])
arg5_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
arg10_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf154_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op154_loop_body:
    var_ranges = {z0: 48}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg10_1', get_index_1)
        constant = ops.constant(0.01, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg10_1', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg10_1', get_index_3)
        constant_1 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_3, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_2)
        add = ops.add(load_2, mul_2)
        constant_3 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_3)
        constant_4 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        add_1 = ops.add(mul, mul_4)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg10_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg10_1', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg10_1', get_index_6)
        constant_5 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_6, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_6)
        add_2 = ops.add(load_5, mul_6)
        constant_7 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_8)
        add_3 = ops.add(load_4, mul_8)
        constant_9 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_9)
        constant_10 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_10)
        add_4 = ops.add(add_1, mul_10)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('arg10_1', get_index_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('arg10_1', get_index_8)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('arg10_1', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('arg10_1', get_index_10)
        constant_11 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_10, constant_11)
        constant_12 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_12)
        add_5 = ops.add(load_9, mul_12)
        constant_13 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_14)
        add_6 = ops.add(load_8, mul_14)
        constant_15 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_15)
        add_7 = ops.add(load_7, mul_15)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_16)
        add_8 = ops.add(add_4, mul_16)
        constant_17 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_17)
        add_9 = ops.add(load, mul_17)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf154', get_index_11, add_9, None)
        return store


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 48}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf135', 3069*c0 + c1 + 3*c2, {c0: 16, c1: 3, c2: 1023}, None),
        MemoryDep('buf146', 3069*c0 + c1 + 3*c2, {c0: 16, c1: 3, c2: 1023}, None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.group.device = cpu
op155.group.iteration = ((16, 3), (1023,))
op155.sizes = ([16, 3], [1023])
buf135_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf146_layout = FixedLayout('cpu', torch.float32, size=[16, 1023, 3], stride=[3069, 3, 1])
buf155_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op155_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 1023}
    index0 = 3069*z0 + z1 + 3*z2
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf146', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf155', get_index_2, reduction)
        return store_reduction


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 48}, None)]
op156.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 48}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf156.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op156.group.device = cpu
op156.group.iteration = ((16, 3), ())
op156.sizes = ([16, 3], [])
buf155_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf156_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op156_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = z1
    index1 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(2, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        constant_2 = ops.constant(0.0, torch.float32)
        constant_3 = ops.constant(-665.1179809570312, torch.float32)
        where = ops.where(lt_1, constant_2, constant_3)
        constant_4 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(lt, constant_4, where)
        get_index_2 = self.get_index('index1')
        load = ops.load('buf155', get_index_2)
        add = ops.add(where_1, load)
        constant_5 = ops.constant(0.014749262536873156, torch.float32)
        mul = ops.mul(add, constant_5)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf156', get_index_3, mul, None)
        return store


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 48}, None)]
op157.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 48}, None)]
op157.met_dependencies = [MemoryDep('arg10_1', c0, {c0: 48}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf157.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op157.group.device = cpu
op157.group.iteration = ((48,), ())
op157.sizes = ([48], [])
arg10_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf156_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf157_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op157_loop_body:
    var_ranges = {z0: 48}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg10_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        constant = ops.constant(0.01, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf156', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf156', get_index_3)
        constant_1 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_3, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_2)
        add = ops.add(load_2, mul_2)
        constant_3 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_3)
        constant_4 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        add_1 = ops.add(mul, mul_4)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf156', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf156', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf156', get_index_6)
        constant_5 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_6, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_6)
        add_2 = ops.add(load_5, mul_6)
        constant_7 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_8)
        add_3 = ops.add(load_4, mul_8)
        constant_9 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_9)
        constant_10 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_10)
        add_4 = ops.add(add_1, mul_10)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf156', get_index_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf156', get_index_8)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf156', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('buf156', get_index_10)
        constant_11 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_10, constant_11)
        constant_12 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_12)
        add_5 = ops.add(load_9, mul_12)
        constant_13 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_14)
        add_6 = ops.add(load_8, mul_14)
        constant_15 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_15)
        add_7 = ops.add(load_7, mul_15)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_16)
        add_8 = ops.add(add_4, mul_16)
        constant_17 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_17)
        add_9 = ops.add(load, mul_17)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf157', get_index_11, add_9, None)
        return store


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0 + 3*c1, {c0: 3, c1: 16}, None)]
op158.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 48}, None)]
op158.met_dependencies = [MemoryDep('arg11_1', c0 + 3*c1, {c0: 3, c1: 16}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op158.group.device = cpu
op158.group.iteration = ((3, 16), ())
op158.sizes = ([3, 16], [])
arg11_1_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf150_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[1, 16])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op158_loop_body:
    var_ranges = {z0: 3, z1: 16}
    index0 = z0 + 3*z1
    index1 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf150', get_index_1)
        constant = ops.constant(0.01, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf150', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf150', get_index_3)
        constant_1 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_3, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_2)
        add = ops.add(load_2, mul_2)
        constant_3 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_3)
        constant_4 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        add_1 = ops.add(mul, mul_4)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf150', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf150', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf150', get_index_6)
        constant_5 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_6, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_6)
        add_2 = ops.add(load_5, mul_6)
        constant_7 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_8)
        add_3 = ops.add(load_4, mul_8)
        constant_9 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_9)
        constant_10 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_10)
        add_4 = ops.add(add_1, mul_10)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf150', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf150', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf150', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('buf150', get_index_10)
        constant_11 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_10, constant_11)
        constant_12 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_12)
        add_5 = ops.add(load_9, mul_12)
        constant_13 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_14)
        add_6 = ops.add(load_8, mul_14)
        constant_15 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_15)
        add_7 = ops.add(load_7, mul_15)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_16)
        add_8 = ops.add(add_4, mul_16)
        constant_17 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_17)
        add_9 = ops.add(load, mul_17)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf158', get_index_11, add_9, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 16}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf158', 3*c0 + 1, {c0: 16}, None),
        MemoryDep('buf158', 3*c0 + 2, {c0: 16}, None),
        MemoryDep('buf158', 3*c0, {c0: 16}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cpu', torch.float32, size=[16, 1], stride=[1, 16])
    buf159.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op159.group.device = cpu
op159.group.iteration = ((16,), ())
op159.sizes = ([16], [])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf159_layout = FixedLayout('cpu', torch.float32, size=[16, 1], stride=[1, 16])
class op159_loop_body:
    var_ranges = {z0: 16}
    index0 = 3*z0
    index1 = 3*z0 + 1
    index2 = 3*z0 + 2
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        constant = ops.constant(0.01, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf158', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf158', get_index_2)
        constant_1 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_2)
        add = ops.add(load_1, mul_2)
        constant_3 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_3)
        constant_4 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        add_1 = ops.add(mul, mul_4)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf158', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf158', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf158', get_index_5)
        constant_5 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_5, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_6)
        add_2 = ops.add(load_4, mul_6)
        constant_7 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_8)
        add_3 = ops.add(load_3, mul_8)
        constant_9 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_9)
        constant_10 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_10)
        add_4 = ops.add(add_1, mul_10)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf158', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf158', get_index_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf158', get_index_8)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf158', get_index_9)
        constant_11 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_9, constant_11)
        constant_12 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_12)
        add_5 = ops.add(load_8, mul_12)
        constant_13 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_14)
        add_6 = ops.add(load_7, mul_14)
        constant_15 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_15)
        add_7 = ops.add(load_6, mul_15)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_16)
        add_8 = ops.add(add_4, mul_16)
        constant_17 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_17)
        mul_18 = ops.mul(mul_17, mul_17)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('buf158', get_index_10)
        constant_18 = ops.constant(0.01, torch.float32)
        mul_19 = ops.mul(load_10, constant_18)
        get_index_11 = self.get_index('index1')
        load_11 = ops.load('buf158', get_index_11)
        get_index_12 = self.get_index('index1')
        load_12 = ops.load('buf158', get_index_12)
        constant_19 = ops.constant(0.01, torch.float32)
        mul_20 = ops.mul(load_12, constant_19)
        constant_20 = ops.constant(0.5, torch.float32)
        mul_21 = ops.mul(mul_20, constant_20)
        add_9 = ops.add(load_11, mul_21)
        constant_21 = ops.constant(0.01, torch.float32)
        mul_22 = ops.mul(add_9, constant_21)
        constant_22 = ops.constant(2.0, torch.float32)
        mul_23 = ops.mul(mul_22, constant_22)
        add_10 = ops.add(mul_19, mul_23)
        get_index_13 = self.get_index('index1')
        load_13 = ops.load('buf158', get_index_13)
        get_index_14 = self.get_index('index1')
        load_14 = ops.load('buf158', get_index_14)
        get_index_15 = self.get_index('index1')
        load_15 = ops.load('buf158', get_index_15)
        constant_23 = ops.constant(0.01, torch.float32)
        mul_24 = ops.mul(load_15, constant_23)
        constant_24 = ops.constant(0.5, torch.float32)
        mul_25 = ops.mul(mul_24, constant_24)
        add_11 = ops.add(load_14, mul_25)
        constant_25 = ops.constant(0.01, torch.float32)
        mul_26 = ops.mul(add_11, constant_25)
        constant_26 = ops.constant(0.5, torch.float32)
        mul_27 = ops.mul(mul_26, constant_26)
        add_12 = ops.add(load_13, mul_27)
        constant_27 = ops.constant(0.01, torch.float32)
        mul_28 = ops.mul(add_12, constant_27)
        constant_28 = ops.constant(2.0, torch.float32)
        mul_29 = ops.mul(mul_28, constant_28)
        add_13 = ops.add(add_10, mul_29)
        get_index_16 = self.get_index('index1')
        load_16 = ops.load('buf158', get_index_16)
        get_index_17 = self.get_index('index1')
        load_17 = ops.load('buf158', get_index_17)
        get_index_18 = self.get_index('index1')
        load_18 = ops.load('buf158', get_index_18)
        get_index_19 = self.get_index('index1')
        load_19 = ops.load('buf158', get_index_19)
        constant_29 = ops.constant(0.01, torch.float32)
        mul_30 = ops.mul(load_19, constant_29)
        constant_30 = ops.constant(0.5, torch.float32)
        mul_31 = ops.mul(mul_30, constant_30)
        add_14 = ops.add(load_18, mul_31)
        constant_31 = ops.constant(0.01, torch.float32)
        mul_32 = ops.mul(add_14, constant_31)
        constant_32 = ops.constant(0.5, torch.float32)
        mul_33 = ops.mul(mul_32, constant_32)
        add_15 = ops.add(load_17, mul_33)
        constant_33 = ops.constant(0.01, torch.float32)
        mul_34 = ops.mul(add_15, constant_33)
        add_16 = ops.add(load_16, mul_34)
        constant_34 = ops.constant(0.01, torch.float32)
        mul_35 = ops.mul(add_16, constant_34)
        add_17 = ops.add(add_13, mul_35)
        constant_35 = ops.constant(0.16666666666666666, torch.float32)
        mul_36 = ops.mul(add_17, constant_35)
        mul_37 = ops.mul(mul_36, mul_36)
        add_18 = ops.add(mul_18, mul_37)
        get_index_20 = self.get_index('index2')
        load_20 = ops.load('buf158', get_index_20)
        constant_36 = ops.constant(0.01, torch.float32)
        mul_38 = ops.mul(load_20, constant_36)
        get_index_21 = self.get_index('index2')
        load_21 = ops.load('buf158', get_index_21)
        get_index_22 = self.get_index('index2')
        load_22 = ops.load('buf158', get_index_22)
        constant_37 = ops.constant(0.01, torch.float32)
        mul_39 = ops.mul(load_22, constant_37)
        constant_38 = ops.constant(0.5, torch.float32)
        mul_40 = ops.mul(mul_39, constant_38)
        add_19 = ops.add(load_21, mul_40)
        constant_39 = ops.constant(0.01, torch.float32)
        mul_41 = ops.mul(add_19, constant_39)
        constant_40 = ops.constant(2.0, torch.float32)
        mul_42 = ops.mul(mul_41, constant_40)
        add_20 = ops.add(mul_38, mul_42)
        get_index_23 = self.get_index('index2')
        load_23 = ops.load('buf158', get_index_23)
        get_index_24 = self.get_index('index2')
        load_24 = ops.load('buf158', get_index_24)
        get_index_25 = self.get_index('index2')
        load_25 = ops.load('buf158', get_index_25)
        constant_41 = ops.constant(0.01, torch.float32)
        mul_43 = ops.mul(load_25, constant_41)
        constant_42 = ops.constant(0.5, torch.float32)
        mul_44 = ops.mul(mul_43, constant_42)
        add_21 = ops.add(load_24, mul_44)
        constant_43 = ops.constant(0.01, torch.float32)
        mul_45 = ops.mul(add_21, constant_43)
        constant_44 = ops.constant(0.5, torch.float32)
        mul_46 = ops.mul(mul_45, constant_44)
        add_22 = ops.add(load_23, mul_46)
        constant_45 = ops.constant(0.01, torch.float32)
        mul_47 = ops.mul(add_22, constant_45)
        constant_46 = ops.constant(2.0, torch.float32)
        mul_48 = ops.mul(mul_47, constant_46)
        add_23 = ops.add(add_20, mul_48)
        get_index_26 = self.get_index('index2')
        load_26 = ops.load('buf158', get_index_26)
        get_index_27 = self.get_index('index2')
        load_27 = ops.load('buf158', get_index_27)
        get_index_28 = self.get_index('index2')
        load_28 = ops.load('buf158', get_index_28)
        get_index_29 = self.get_index('index2')
        load_29 = ops.load('buf158', get_index_29)
        constant_47 = ops.constant(0.01, torch.float32)
        mul_49 = ops.mul(load_29, constant_47)
        constant_48 = ops.constant(0.5, torch.float32)
        mul_50 = ops.mul(mul_49, constant_48)
        add_24 = ops.add(load_28, mul_50)
        constant_49 = ops.constant(0.01, torch.float32)
        mul_51 = ops.mul(add_24, constant_49)
        constant_50 = ops.constant(0.5, torch.float32)
        mul_52 = ops.mul(mul_51, constant_50)
        add_25 = ops.add(load_27, mul_52)
        constant_51 = ops.constant(0.01, torch.float32)
        mul_53 = ops.mul(add_25, constant_51)
        add_26 = ops.add(load_26, mul_53)
        constant_52 = ops.constant(0.01, torch.float32)
        mul_54 = ops.mul(add_26, constant_52)
        add_27 = ops.add(add_23, mul_54)
        constant_53 = ops.constant(0.16666666666666666, torch.float32)
        mul_55 = ops.mul(add_27, constant_53)
        mul_56 = ops.mul(mul_55, mul_55)
        add_28 = ops.add(add_18, mul_56)
        get_index_30 = self.get_index('index3')
        store = ops.store('buf159', get_index_30, add_28, None)
        return store


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 48}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf158', 3*c0 + 1, {c0: 16}, None),
        MemoryDep('buf158', 3*c0 + 2, {c0: 16}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cpu
op160.group.iteration = ((16, 3), ())
op160.sizes = ([16, 3], [])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf160_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op160_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = z1
    index1 = 3*z0 + 1
    index2 = 3*z0 + 2
    index3 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf158', get_index_1)
        constant_1 = ops.constant(0.01, torch.float32)
        mul = ops.mul(load, constant_1)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_2)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf158', get_index_3)
        constant_2 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        add = ops.add(load_1, mul_2)
        constant_4 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_4)
        constant_5 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_5)
        add_1 = ops.add(mul, mul_4)
        get_index_4 = self.get_index('index1')
        load_3 = ops.load('buf158', get_index_4)
        get_index_5 = self.get_index('index1')
        load_4 = ops.load('buf158', get_index_5)
        get_index_6 = self.get_index('index1')
        load_5 = ops.load('buf158', get_index_6)
        constant_6 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_5, constant_6)
        constant_7 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_7)
        add_2 = ops.add(load_4, mul_6)
        constant_8 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_8)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_9)
        add_3 = ops.add(load_3, mul_8)
        constant_10 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_10)
        constant_11 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_11)
        add_4 = ops.add(add_1, mul_10)
        get_index_7 = self.get_index('index1')
        load_6 = ops.load('buf158', get_index_7)
        get_index_8 = self.get_index('index1')
        load_7 = ops.load('buf158', get_index_8)
        get_index_9 = self.get_index('index1')
        load_8 = ops.load('buf158', get_index_9)
        get_index_10 = self.get_index('index1')
        load_9 = ops.load('buf158', get_index_10)
        constant_12 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_9, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_13)
        add_5 = ops.add(load_8, mul_12)
        constant_14 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_14)
        constant_15 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_15)
        add_6 = ops.add(load_7, mul_14)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_16)
        add_7 = ops.add(load_6, mul_15)
        constant_17 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_17)
        add_8 = ops.add(add_4, mul_16)
        constant_18 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_18)
        constant_19 = ops.constant(0, torch.int32)
        constant_20 = ops.constant(0, torch.int32)
        eq_1 = ops.eq(constant_19, constant_20)
        get_index_11 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_11, torch.int32)
        constant_21 = ops.constant(1, torch.int32)
        eq_2 = ops.eq(index_expr_1, constant_21)
        get_index_12 = self.get_index('index2')
        load_10 = ops.load('buf158', get_index_12)
        constant_22 = ops.constant(0.01, torch.float32)
        mul_18 = ops.mul(load_10, constant_22)
        get_index_13 = self.get_index('index2')
        load_11 = ops.load('buf158', get_index_13)
        get_index_14 = self.get_index('index2')
        load_12 = ops.load('buf158', get_index_14)
        constant_23 = ops.constant(0.01, torch.float32)
        mul_19 = ops.mul(load_12, constant_23)
        constant_24 = ops.constant(0.5, torch.float32)
        mul_20 = ops.mul(mul_19, constant_24)
        add_9 = ops.add(load_11, mul_20)
        constant_25 = ops.constant(0.01, torch.float32)
        mul_21 = ops.mul(add_9, constant_25)
        constant_26 = ops.constant(2.0, torch.float32)
        mul_22 = ops.mul(mul_21, constant_26)
        add_10 = ops.add(mul_18, mul_22)
        get_index_15 = self.get_index('index2')
        load_13 = ops.load('buf158', get_index_15)
        get_index_16 = self.get_index('index2')
        load_14 = ops.load('buf158', get_index_16)
        get_index_17 = self.get_index('index2')
        load_15 = ops.load('buf158', get_index_17)
        constant_27 = ops.constant(0.01, torch.float32)
        mul_23 = ops.mul(load_15, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        mul_24 = ops.mul(mul_23, constant_28)
        add_11 = ops.add(load_14, mul_24)
        constant_29 = ops.constant(0.01, torch.float32)
        mul_25 = ops.mul(add_11, constant_29)
        constant_30 = ops.constant(0.5, torch.float32)
        mul_26 = ops.mul(mul_25, constant_30)
        add_12 = ops.add(load_13, mul_26)
        constant_31 = ops.constant(0.01, torch.float32)
        mul_27 = ops.mul(add_12, constant_31)
        constant_32 = ops.constant(2.0, torch.float32)
        mul_28 = ops.mul(mul_27, constant_32)
        add_13 = ops.add(add_10, mul_28)
        get_index_18 = self.get_index('index2')
        load_16 = ops.load('buf158', get_index_18)
        get_index_19 = self.get_index('index2')
        load_17 = ops.load('buf158', get_index_19)
        get_index_20 = self.get_index('index2')
        load_18 = ops.load('buf158', get_index_20)
        get_index_21 = self.get_index('index2')
        load_19 = ops.load('buf158', get_index_21)
        constant_33 = ops.constant(0.01, torch.float32)
        mul_29 = ops.mul(load_19, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        mul_30 = ops.mul(mul_29, constant_34)
        add_14 = ops.add(load_18, mul_30)
        constant_35 = ops.constant(0.01, torch.float32)
        mul_31 = ops.mul(add_14, constant_35)
        constant_36 = ops.constant(0.5, torch.float32)
        mul_32 = ops.mul(mul_31, constant_36)
        add_15 = ops.add(load_17, mul_32)
        constant_37 = ops.constant(0.01, torch.float32)
        mul_33 = ops.mul(add_15, constant_37)
        add_16 = ops.add(load_16, mul_33)
        constant_38 = ops.constant(0.01, torch.float32)
        mul_34 = ops.mul(add_16, constant_38)
        add_17 = ops.add(add_13, mul_34)
        constant_39 = ops.constant(0.16666666666666666, torch.float32)
        mul_35 = ops.mul(add_17, constant_39)
        neg = ops.neg(mul_35)
        constant_40 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, neg, constant_40)
        constant_41 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, where, constant_41)
        where_2 = ops.where(eq, mul_17, where_1)
        get_index_22 = self.get_index('index3')
        store = ops.store('buf160', get_index_22, where_2, None)
        return store


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 144}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf158', 3*c0 + 2, {c0: 16}, None),
        MemoryDep('buf160', 3*c0 + c2, {c0: 16, c1: 3, c2: 3}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cpu
op161.group.iteration = ((16, 3, 3), ())
op161.sizes = ([16, 3, 3], [])
buf160_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf161_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
class op161_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 3}
    index0 = z1
    index1 = 3*z0 + z2
    index2 = z2
    index3 = 3*z0 + 2
    index4 = 9*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf160', get_index_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_1 = ops.constant(0, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_4 = self.get_index('index3')
        load_1 = ops.load('buf158', get_index_4)
        constant_3 = ops.constant(0.01, torch.float32)
        mul = ops.mul(load_1, constant_3)
        get_index_5 = self.get_index('index3')
        load_2 = ops.load('buf158', get_index_5)
        get_index_6 = self.get_index('index3')
        load_3 = ops.load('buf158', get_index_6)
        constant_4 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_3, constant_4)
        constant_5 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_5)
        add = ops.add(load_2, mul_2)
        constant_6 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_7)
        add_1 = ops.add(mul, mul_4)
        get_index_7 = self.get_index('index3')
        load_4 = ops.load('buf158', get_index_7)
        get_index_8 = self.get_index('index3')
        load_5 = ops.load('buf158', get_index_8)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf158', get_index_9)
        constant_8 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_6, constant_8)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_9)
        add_2 = ops.add(load_5, mul_6)
        constant_10 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_10)
        constant_11 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_11)
        add_3 = ops.add(load_4, mul_8)
        constant_12 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_12)
        constant_13 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_13)
        add_4 = ops.add(add_1, mul_10)
        get_index_10 = self.get_index('index3')
        load_7 = ops.load('buf158', get_index_10)
        get_index_11 = self.get_index('index3')
        load_8 = ops.load('buf158', get_index_11)
        get_index_12 = self.get_index('index3')
        load_9 = ops.load('buf158', get_index_12)
        get_index_13 = self.get_index('index3')
        load_10 = ops.load('buf158', get_index_13)
        constant_14 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_10, constant_14)
        constant_15 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_15)
        add_5 = ops.add(load_9, mul_12)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_17)
        add_6 = ops.add(load_8, mul_14)
        constant_18 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_18)
        add_7 = ops.add(load_7, mul_15)
        constant_19 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_19)
        add_8 = ops.add(add_4, mul_16)
        constant_20 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_20)
        neg = ops.neg(mul_17)
        constant_21 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_2, neg, constant_21)
        constant_22 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, where, constant_22)
        where_2 = ops.where(eq, load, where_1)
        get_index_14 = self.get_index('index4')
        store = ops.store('buf161', get_index_14, where_2, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 144}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf158', 3*c0, {c0: 16}, None),
        MemoryDep('buf161', 9*c0 + c2 + 3, {c0: 16, c1: 3, c2: 3}, None),
        MemoryDep('buf161', c0, {c0: 144}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cpu
op162.group.iteration = ((16, 3, 3), ())
op162.sizes = ([16, 3, 3], [])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf161_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf161_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf162_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
class op162_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 3}
    index0 = z1
    index1 = z2
    index2 = 3*z0
    index3 = 9*z0 + z2 + 3
    index4 = 9*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(1, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(2, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf158', get_index_2)
        constant_2 = ops.constant(0.01, torch.float32)
        mul = ops.mul(load, constant_2)
        get_index_3 = self.get_index('index2')
        load_1 = ops.load('buf158', get_index_3)
        get_index_4 = self.get_index('index2')
        load_2 = ops.load('buf158', get_index_4)
        constant_3 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_2, constant_3)
        constant_4 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_4)
        add = ops.add(load_1, mul_2)
        constant_5 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_5)
        constant_6 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_6)
        add_1 = ops.add(mul, mul_4)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf158', get_index_5)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf158', get_index_6)
        get_index_7 = self.get_index('index2')
        load_5 = ops.load('buf158', get_index_7)
        constant_7 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_5, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_8)
        add_2 = ops.add(load_4, mul_6)
        constant_9 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_10)
        add_3 = ops.add(load_3, mul_8)
        constant_11 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_11)
        constant_12 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_12)
        add_4 = ops.add(add_1, mul_10)
        get_index_8 = self.get_index('index2')
        load_6 = ops.load('buf158', get_index_8)
        get_index_9 = self.get_index('index2')
        load_7 = ops.load('buf158', get_index_9)
        get_index_10 = self.get_index('index2')
        load_8 = ops.load('buf158', get_index_10)
        get_index_11 = self.get_index('index2')
        load_9 = ops.load('buf158', get_index_11)
        constant_13 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_9, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_14)
        add_5 = ops.add(load_8, mul_12)
        constant_15 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_16)
        add_6 = ops.add(load_7, mul_14)
        constant_17 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_17)
        add_7 = ops.add(load_6, mul_15)
        constant_18 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_18)
        add_8 = ops.add(add_4, mul_16)
        constant_19 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_19)
        neg = ops.neg(mul_17)
        get_index_12 = self.get_index('index3')
        load_10 = ops.load('buf161', get_index_12)
        where = ops.where(eq_1, neg, load_10)
        get_index_13 = self.get_index('index4')
        load_11 = ops.load('buf161', get_index_13)
        where_1 = ops.where(eq, where, load_11)
        get_index_14 = self.get_index('index4')
        store = ops.store('buf162', get_index_14, where_1, None)
        return store


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 48}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf158', 3*c0 + 1, {c0: 16}, None),
        MemoryDep('buf158', 3*c0 + 2, {c0: 16}, None),
        MemoryDep('buf162', 9*c0 + c1 + 3, {c0: 16, c1: 3}, None),
        MemoryDep('buf162', 9*c0 + c1 + 6, {c0: 16, c1: 3}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cpu
op163.group.iteration = ((16, 3), ())
op163.sizes = ([16, 3], [])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf162_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf162_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf163_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
class op163_loop_body:
    var_ranges = {z0: 16, z1: 3}
    index0 = z1
    index1 = 3*z0 + 1
    index2 = 3*z0 + 2
    index3 = 9*z0 + z1 + 3
    index4 = 9*z0 + z1 + 6
    index5 = 3*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf158', get_index_1)
        constant_1 = ops.constant(0.01, torch.float32)
        mul = ops.mul(load, constant_1)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_2)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf158', get_index_3)
        constant_2 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        add = ops.add(load_1, mul_2)
        constant_4 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_4)
        constant_5 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_5)
        add_1 = ops.add(mul, mul_4)
        get_index_4 = self.get_index('index1')
        load_3 = ops.load('buf158', get_index_4)
        get_index_5 = self.get_index('index1')
        load_4 = ops.load('buf158', get_index_5)
        get_index_6 = self.get_index('index1')
        load_5 = ops.load('buf158', get_index_6)
        constant_6 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_5, constant_6)
        constant_7 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_7)
        add_2 = ops.add(load_4, mul_6)
        constant_8 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_8)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_9)
        add_3 = ops.add(load_3, mul_8)
        constant_10 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_10)
        constant_11 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_11)
        add_4 = ops.add(add_1, mul_10)
        get_index_7 = self.get_index('index1')
        load_6 = ops.load('buf158', get_index_7)
        get_index_8 = self.get_index('index1')
        load_7 = ops.load('buf158', get_index_8)
        get_index_9 = self.get_index('index1')
        load_8 = ops.load('buf158', get_index_9)
        get_index_10 = self.get_index('index1')
        load_9 = ops.load('buf158', get_index_10)
        constant_12 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_9, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_13)
        add_5 = ops.add(load_8, mul_12)
        constant_14 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_14)
        constant_15 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_15)
        add_6 = ops.add(load_7, mul_14)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_16)
        add_7 = ops.add(load_6, mul_15)
        constant_17 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_17)
        add_8 = ops.add(add_4, mul_16)
        constant_18 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_18)
        neg = ops.neg(mul_17)
        constant_19 = ops.constant(2, torch.int32)
        constant_20 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(constant_19, constant_20)
        get_index_11 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_11, torch.int32)
        constant_21 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_1, constant_21)
        get_index_12 = self.get_index('index2')
        load_10 = ops.load('buf158', get_index_12)
        constant_22 = ops.constant(0.01, torch.float32)
        mul_18 = ops.mul(load_10, constant_22)
        get_index_13 = self.get_index('index2')
        load_11 = ops.load('buf158', get_index_13)
        get_index_14 = self.get_index('index2')
        load_12 = ops.load('buf158', get_index_14)
        constant_23 = ops.constant(0.01, torch.float32)
        mul_19 = ops.mul(load_12, constant_23)
        constant_24 = ops.constant(0.5, torch.float32)
        mul_20 = ops.mul(mul_19, constant_24)
        add_9 = ops.add(load_11, mul_20)
        constant_25 = ops.constant(0.01, torch.float32)
        mul_21 = ops.mul(add_9, constant_25)
        constant_26 = ops.constant(2.0, torch.float32)
        mul_22 = ops.mul(mul_21, constant_26)
        add_10 = ops.add(mul_18, mul_22)
        get_index_15 = self.get_index('index2')
        load_13 = ops.load('buf158', get_index_15)
        get_index_16 = self.get_index('index2')
        load_14 = ops.load('buf158', get_index_16)
        get_index_17 = self.get_index('index2')
        load_15 = ops.load('buf158', get_index_17)
        constant_27 = ops.constant(0.01, torch.float32)
        mul_23 = ops.mul(load_15, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        mul_24 = ops.mul(mul_23, constant_28)
        add_11 = ops.add(load_14, mul_24)
        constant_29 = ops.constant(0.01, torch.float32)
        mul_25 = ops.mul(add_11, constant_29)
        constant_30 = ops.constant(0.5, torch.float32)
        mul_26 = ops.mul(mul_25, constant_30)
        add_12 = ops.add(load_13, mul_26)
        constant_31 = ops.constant(0.01, torch.float32)
        mul_27 = ops.mul(add_12, constant_31)
        constant_32 = ops.constant(2.0, torch.float32)
        mul_28 = ops.mul(mul_27, constant_32)
        add_13 = ops.add(add_10, mul_28)
        get_index_18 = self.get_index('index2')
        load_16 = ops.load('buf158', get_index_18)
        get_index_19 = self.get_index('index2')
        load_17 = ops.load('buf158', get_index_19)
        get_index_20 = self.get_index('index2')
        load_18 = ops.load('buf158', get_index_20)
        get_index_21 = self.get_index('index2')
        load_19 = ops.load('buf158', get_index_21)
        constant_33 = ops.constant(0.01, torch.float32)
        mul_29 = ops.mul(load_19, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        mul_30 = ops.mul(mul_29, constant_34)
        add_14 = ops.add(load_18, mul_30)
        constant_35 = ops.constant(0.01, torch.float32)
        mul_31 = ops.mul(add_14, constant_35)
        constant_36 = ops.constant(0.5, torch.float32)
        mul_32 = ops.mul(mul_31, constant_36)
        add_15 = ops.add(load_17, mul_32)
        constant_37 = ops.constant(0.01, torch.float32)
        mul_33 = ops.mul(add_15, constant_37)
        add_16 = ops.add(load_16, mul_33)
        constant_38 = ops.constant(0.01, torch.float32)
        mul_34 = ops.mul(add_16, constant_38)
        add_17 = ops.add(add_13, mul_34)
        constant_39 = ops.constant(0.16666666666666666, torch.float32)
        mul_35 = ops.mul(add_17, constant_39)
        get_index_22 = self.get_index('index3')
        load_20 = ops.load('buf162', get_index_22)
        where = ops.where(eq_2, mul_35, load_20)
        get_index_23 = self.get_index('index4')
        load_21 = ops.load('buf162', get_index_23)
        where_1 = ops.where(eq_1, where, load_21)
        where_2 = ops.where(eq, neg, where_1)
        get_index_24 = self.get_index('index5')
        store = ops.store('buf163', get_index_24, where_2, None)
        return store


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 144}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf158', 3*c0 + 2, {c0: 16}, None),
        MemoryDep('buf162', 9*c0 + c2 + 3, {c0: 16, c1: 3, c2: 3}, None),
        MemoryDep('buf162', c0, {c0: 144}, None),
        MemoryDep('buf163', 3*c0 + c2, {c0: 16, c1: 3, c2: 3}, None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cpu
op164.group.iteration = ((16, 3, 3), ())
op164.sizes = ([16, 3, 3], [])
buf163_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf162_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf162_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf164_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
class op164_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 3}
    index0 = z1
    index1 = 3*z0 + z2
    index2 = z2
    index3 = 3*z0 + 2
    index4 = 9*z0 + z2 + 3
    index5 = 9*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int32)
        constant_2 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_4 = self.get_index('index3')
        load_1 = ops.load('buf158', get_index_4)
        constant_3 = ops.constant(0.01, torch.float32)
        mul = ops.mul(load_1, constant_3)
        get_index_5 = self.get_index('index3')
        load_2 = ops.load('buf158', get_index_5)
        get_index_6 = self.get_index('index3')
        load_3 = ops.load('buf158', get_index_6)
        constant_4 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_3, constant_4)
        constant_5 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_5)
        add = ops.add(load_2, mul_2)
        constant_6 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_7)
        add_1 = ops.add(mul, mul_4)
        get_index_7 = self.get_index('index3')
        load_4 = ops.load('buf158', get_index_7)
        get_index_8 = self.get_index('index3')
        load_5 = ops.load('buf158', get_index_8)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf158', get_index_9)
        constant_8 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_6, constant_8)
        constant_9 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_9)
        add_2 = ops.add(load_5, mul_6)
        constant_10 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_10)
        constant_11 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_11)
        add_3 = ops.add(load_4, mul_8)
        constant_12 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_12)
        constant_13 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_13)
        add_4 = ops.add(add_1, mul_10)
        get_index_10 = self.get_index('index3')
        load_7 = ops.load('buf158', get_index_10)
        get_index_11 = self.get_index('index3')
        load_8 = ops.load('buf158', get_index_11)
        get_index_12 = self.get_index('index3')
        load_9 = ops.load('buf158', get_index_12)
        get_index_13 = self.get_index('index3')
        load_10 = ops.load('buf158', get_index_13)
        constant_14 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_10, constant_14)
        constant_15 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_15)
        add_5 = ops.add(load_9, mul_12)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_17)
        add_6 = ops.add(load_8, mul_14)
        constant_18 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_18)
        add_7 = ops.add(load_7, mul_15)
        constant_19 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_19)
        add_8 = ops.add(add_4, mul_16)
        constant_20 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_20)
        get_index_14 = self.get_index('index4')
        load_11 = ops.load('buf162', get_index_14)
        where = ops.where(eq_2, mul_17, load_11)
        get_index_15 = self.get_index('index5')
        load_12 = ops.load('buf162', get_index_15)
        where_1 = ops.where(eq_1, where, load_12)
        where_2 = ops.where(eq, load, where_1)
        get_index_16 = self.get_index('index5')
        store = ops.store('buf164', get_index_16, where_2, None)
        return store


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 144}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf158', 3*c0, {c0: 16}, None),
        MemoryDep('buf164', 9*c0 + c2 + 6, {c0: 16, c1: 3, c2: 3}, None),
        MemoryDep('buf164', c0, {c0: 144}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
    buf165.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op165.group.device = cpu
op165.group.iteration = ((16, 3, 3), ())
op165.sizes = ([16, 3, 3], [])
buf158_layout = FixedLayout('cpu', torch.float32, size=[16, 3], stride=[3, 1])
buf164_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf164_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf165_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
class op165_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 3}
    index0 = z1
    index1 = z2
    index2 = 3*z0
    index3 = 9*z0 + z2 + 6
    index4 = 9*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf158', get_index_2)
        constant_2 = ops.constant(0.01, torch.float32)
        mul = ops.mul(load, constant_2)
        get_index_3 = self.get_index('index2')
        load_1 = ops.load('buf158', get_index_3)
        get_index_4 = self.get_index('index2')
        load_2 = ops.load('buf158', get_index_4)
        constant_3 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_2, constant_3)
        constant_4 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_4)
        add = ops.add(load_1, mul_2)
        constant_5 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_5)
        constant_6 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_6)
        add_1 = ops.add(mul, mul_4)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf158', get_index_5)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf158', get_index_6)
        get_index_7 = self.get_index('index2')
        load_5 = ops.load('buf158', get_index_7)
        constant_7 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_5, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_8)
        add_2 = ops.add(load_4, mul_6)
        constant_9 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_10)
        add_3 = ops.add(load_3, mul_8)
        constant_11 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_11)
        constant_12 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_12)
        add_4 = ops.add(add_1, mul_10)
        get_index_8 = self.get_index('index2')
        load_6 = ops.load('buf158', get_index_8)
        get_index_9 = self.get_index('index2')
        load_7 = ops.load('buf158', get_index_9)
        get_index_10 = self.get_index('index2')
        load_8 = ops.load('buf158', get_index_10)
        get_index_11 = self.get_index('index2')
        load_9 = ops.load('buf158', get_index_11)
        constant_13 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_9, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_14)
        add_5 = ops.add(load_8, mul_12)
        constant_15 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_16)
        add_6 = ops.add(load_7, mul_14)
        constant_17 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_17)
        add_7 = ops.add(load_6, mul_15)
        constant_18 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_18)
        add_8 = ops.add(add_4, mul_16)
        constant_19 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_19)
        get_index_12 = self.get_index('index3')
        load_10 = ops.load('buf164', get_index_12)
        where = ops.where(eq_1, mul_17, load_10)
        get_index_13 = self.get_index('index4')
        load_11 = ops.load('buf164', get_index_13)
        where_1 = ops.where(eq, where, load_11)
        get_index_14 = self.get_index('index4')
        store = ops.store('buf165', get_index_14, where_1, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.bmm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 144}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 16}, None),
        MemoryDep('buf165', c0, {c0: 144}, None),
        MemoryDep('buf166', c0, {c0: 144}, None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cpu
op167.group.iteration = ((16, 3, 3), ())
op167.sizes = ([16, 3, 3], [])
buf159_layout = FixedLayout('cpu', torch.float32, size=[16, 1], stride=[1, 16])
buf165_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf166_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
buf167_layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
class op167_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 3}
    index0 = z1
    index1 = z2
    index2 = z0
    index3 = 9*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        eq = ops.eq(index_expr, index_expr_1)
        constant = ops.constant(1.0, torch.float32)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, constant, constant_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf159', get_index_2)
        sqrt = ops.sqrt(load)
        constant_2 = ops.constant(1e-06, torch.float32)
        maximum = ops.maximum(sqrt, constant_2)
        sin = ops.sin(maximum)
        get_index_3 = self.get_index('index2')
        load_1 = ops.load('buf159', get_index_3)
        sqrt_1 = ops.sqrt(load_1)
        constant_3 = ops.constant(1e-06, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_3)
        truediv = ops.truediv(sin, maximum_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf165', get_index_4)
        mul = ops.mul(truediv, load_2)
        add = ops.add(where, mul)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf159', get_index_5)
        sqrt_2 = ops.sqrt(load_3)
        constant_4 = ops.constant(1e-06, torch.float32)
        maximum_2 = ops.maximum(sqrt_2, constant_4)
        cos = ops.cos(maximum_2)
        constant_5 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_5, cos)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf159', get_index_6)
        sqrt_3 = ops.sqrt(load_4)
        constant_6 = ops.constant(1e-06, torch.float32)
        maximum_3 = ops.maximum(sqrt_3, constant_6)
        mul_1 = ops.mul(maximum_3, maximum_3)
        truediv_1 = ops.truediv(sub, mul_1)
        get_index_7 = self.get_index('index3')
        load_5 = ops.load('buf166', get_index_7)
        mul_2 = ops.mul(truediv_1, load_5)
        add_1 = ops.add(add, mul_2)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf167', get_index_8, add_1, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cpu', torch.float32, size=[16, 3, 3], stride=[9, 3, 1])
    buf168.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op168.node.kernel = extern_kernels.bmm


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 64}, None)]
op169.unmet_dependencies = []
op169.met_dependencies = 
    [   MemoryDep('arg12_1', 8*c0 + c1 + 4, {c0: 16, c1: 4}, None),
        MemoryDep('arg13_1', c1, {c0: 16, c1: 4}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op169.group.device = cpu
op169.group.iteration = ((16, 4), ())
op169.sizes = ([16, 4], [])
arg12_1_layout = FixedLayout('cpu', torch.float32, size=[16, 8], stride=[8, 1])
arg13_1_layout = FixedLayout('cpu', torch.float32, size=[4], stride=[1])
buf169_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
class op169_loop_body:
    var_ranges = {z0: 16, z1: 4}
    index0 = 8*z0 + z1 + 4
    index1 = z1
    index2 = 4*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg12_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        neg = ops.neg(load_1)
        maximum = ops.maximum(load, neg)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        minimum = ops.minimum(maximum, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf169', get_index_3, minimum, None)
        return store


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 64}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 64}, None)]
op170.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 64}, None),
        MemoryDep('arg14_1', 2*c1 + 1, {c0: 16, c1: 4}, None),
        MemoryDep('arg14_1', 2*c1, {c0: 16, c1: 4}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
    buf170.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op170.group.device = cpu
op170.group.iteration = ((16, 4), ())
op170.sizes = ([16, 4], [])
arg0_1_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
buf169_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
arg14_1_layout = FixedLayout('cpu', torch.float32, size=[2, 4], stride=[1, 2])
arg14_1_layout = FixedLayout('cpu', torch.float32, size=[2, 4], stride=[1, 2])
buf170_layout = FixedLayout('cpu', torch.float32, size=[16, 4], stride=[4, 1])
class op170_loop_body:
    var_ranges = {z0: 16, z1: 4}
    index0 = 4*z0 + z1
    index1 = 2*z1
    index2 = 2*z1 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf169', get_index_1)
        constant = ops.constant(0.01, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf169', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf169', get_index_3)
        constant_1 = ops.constant(0.01, torch.float32)
        mul_1 = ops.mul(load_3, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_2 = ops.mul(mul_1, constant_2)
        add = ops.add(load_2, mul_2)
        constant_3 = ops.constant(0.01, torch.float32)
        mul_3 = ops.mul(add, constant_3)
        constant_4 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        add_1 = ops.add(mul, mul_4)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf169', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf169', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf169', get_index_6)
        constant_5 = ops.constant(0.01, torch.float32)
        mul_5 = ops.mul(load_6, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        mul_6 = ops.mul(mul_5, constant_6)
        add_2 = ops.add(load_5, mul_6)
        constant_7 = ops.constant(0.01, torch.float32)
        mul_7 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        mul_8 = ops.mul(mul_7, constant_8)
        add_3 = ops.add(load_4, mul_8)
        constant_9 = ops.constant(0.01, torch.float32)
        mul_9 = ops.mul(add_3, constant_9)
        constant_10 = ops.constant(2.0, torch.float32)
        mul_10 = ops.mul(mul_9, constant_10)
        add_4 = ops.add(add_1, mul_10)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf169', get_index_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf169', get_index_8)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf169', get_index_9)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('buf169', get_index_10)
        constant_11 = ops.constant(0.01, torch.float32)
        mul_11 = ops.mul(load_10, constant_11)
        constant_12 = ops.constant(0.5, torch.float32)
        mul_12 = ops.mul(mul_11, constant_12)
        add_5 = ops.add(load_9, mul_12)
        constant_13 = ops.constant(0.01, torch.float32)
        mul_13 = ops.mul(add_5, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        mul_14 = ops.mul(mul_13, constant_14)
        add_6 = ops.add(load_8, mul_14)
        constant_15 = ops.constant(0.01, torch.float32)
        mul_15 = ops.mul(add_6, constant_15)
        add_7 = ops.add(load_7, mul_15)
        constant_16 = ops.constant(0.01, torch.float32)
        mul_16 = ops.mul(add_7, constant_16)
        add_8 = ops.add(add_4, mul_16)
        constant_17 = ops.constant(0.16666666666666666, torch.float32)
        mul_17 = ops.mul(add_8, constant_17)
        add_9 = ops.add(load, mul_17)
        get_index_11 = self.get_index('index1')
        load_11 = ops.load('arg14_1', get_index_11)
        maximum = ops.maximum(add_9, load_11)
        get_index_12 = self.get_index('index2')
        load_12 = ops.load('arg14_1', get_index_12)
        minimum = ops.minimum(maximum, load_12)
        get_index_13 = self.get_index('index0')
        store = ops.store('buf170', get_index_13, minimum, None)
        return store


